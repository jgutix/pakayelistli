/**
 * expect the transliterated value as key, and a string with replacements
 */
var MAPPINGS = {
    'a': String.fromCharCode(65, 97, 192, 224, 193, 225, 194, 226, 195, 227, 196, 228, 229, 258, 259),
    'e': String.fromCharCode(69, 101, 200, 232, 201, 233, 202, 234, 203, 235),
    'i': String.fromCharCode(73, 105, 204, 236, 205, 237, 206, 238, 207, 239),
    'o': String.fromCharCode(79, 111, 210, 242, 211, 243, 212, 244, 213, 245, 214, 246),
    'n': String.fromCharCode(78, 110, 209, 241),
    'u': String.fromCharCode(85, 117, 217, 249, 218, 250, 219, 251, 220, 252),
    'c': String.fromCharCode(67, 99, 199, 231),
    'y': String.fromCharCode(89, 121, 221, 253, 159, 255),
};
var DiacriticRegex = /** @class */ (function () {
    function DiacriticRegex() {
    }
    /** Generate a that returns a RegExp, that can be reused with the same options */
    DiacriticRegex.prototype.toRegex = function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var innerMappings = this.mergeMappings(typeof options.mappings === 'object' ? options.mappings : null);
        return function (input) {
            return new RegExp(_this.replacer(input, innerMappings), typeof options.flags === 'string' ? options.flags : 'i');
        };
    };
    /** Generate a that returns a string, that can be reused with the same options */
    DiacriticRegex.prototype.toString = function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var innerMappings = this.mergeMappings(typeof options.mappings === 'object' ? options.mappings : null);
        return function (input) {
            return _this.replacer(input, innerMappings);
        };
    };
    DiacriticRegex.prototype.mergeMappings = function (innerMappings) {
        var base = {};
        for (var mapping in MAPPINGS) {
            if (MAPPINGS.hasOwnProperty(mapping)) {
                base[mapping] = MAPPINGS[mapping];
            }
        }
        if (innerMappings) {
            for (var mapping in innerMappings) {
                if (innerMappings.hasOwnProperty(mapping)) {
                    base[mapping] = innerMappings[mapping];
                }
            }
        }
        return base;
    };
    DiacriticRegex.prototype.replacer = function (input, mappings) {
        return input.split('').map(function (letter) {
            for (var mapping in mappings) {
                if (mapping && mapping !== mappings[mapping] && (mapping === letter || mappings[mapping].indexOf(letter) !== -1)) {
                    letter = Array.isArray(mappings[mapping]) ? mappings[mapping].join('') : "[" + mappings[mapping] + "]";
                    break;
                }
            }
            return letter;
        }).join('');
    };
    return DiacriticRegex;
}());
export { DiacriticRegex };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhY3JpdGljLXJlZ2V4LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW1veHRsYXRpbG95YW4vIiwic291cmNlcyI6WyJsaWIvZGlhY3JpdGljLXJlZ2V4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBOztHQUVHO0FBQ0gsSUFBTSxRQUFRLEdBQWE7SUFDekIsR0FBRyxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDakcsR0FBRyxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ3pFLEdBQUcsRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUN6RSxHQUFHLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNuRixHQUFHLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDM0MsR0FBRyxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxF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QUMsQ0FBRyxRQUFRLENBQUMsT0FBTyxDQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBRyxDQUFDO29CQUNsSCxNQUFNO2lCQUNQO2FBQ0Y7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDZCxDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQUFDLEFBbERELElBa0RDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29waWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3BvY2VzYXIvanMtZGlhY3JpdGljLXJlZ2V4IHdpdGggc29tZSBtb2RpZmljYXRpb25zXG5pbnRlcmZhY2UgTWFwcGluZ3Mge1xuICBbaW5kZXg6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIGV4cGVjdCB0aGUgdHJhbnNsaXRlcmF0ZWQgdmFsdWUgYXMga2V5LCBhbmQgYSBzdHJpbmcgd2l0aCByZXBsYWNlbWVudHNcbiAqL1xuY29uc3QgTUFQUElOR1M6IE1hcHBpbmdzID0ge1xuICAnYSc6IFN0cmluZy5mcm9tQ2hhckNvZGUoNjUsIDk3LCAxOTIsIDIyNCwgMTkzLCAyMjUsIDE5NCwgMjI2LCAxOTUsIDIyNywgMTk2LCAyMjgsIDIyOSwgMjU4LCAyNTkpLFxuICAnZSc6IFN0cmluZy5mcm9tQ2hhckNvZGUoNjksIDEwMSwgMjAwLCAyMzIsIDIwMSwgMjMzLCAyMDIsIDIzNCwgMjAzLCAyMzUpLFxuICAnaSc6IFN0cmluZy5mcm9tQ2hhckNvZGUoNzMsIDEwNSwgMjA0LCAyMzYsIDIwNSwgMjM3LCAyMDYsIDIzOCwgMjA3LCAyMzkpLFxuICAnbyc6IFN0cmluZy5mcm9tQ2hhckNvZGUoNzksIDExMSwgMjEwLCAyNDIsIDIxMSwgMjQzLCAyMTIsIDI0NCwgMjEzLCAyNDUsIDIxNCwgMjQ2KSxcbiAgJ24nOiBTdHJpbmcuZnJvbUNoYXJDb2RlKDc4LCAxMTAsIDIwOSwgMjQxKSxcbiAgJ3UnOiBTdHJpbmcuZnJvbUNoYXJDb2RlKDg1LCAxMTcsIDIxNywgMjQ5LCAyMTgsIDI1MCwgMjE5LCAyNTEsIDIyMCwgMjUyKSxcbiAgJ2MnOiBTdHJpbmcuZnJvbUNoYXJDb2RlKDY3LCA5OSwgMTk5LCAyMzEpLFxuICAneSc6IFN0cmluZy5mcm9tQ2hhckNvZGUoODksIDEyMSwgMjIxLCAyNTMsIDE1OSwgMjU1KSxcbn1cblxuaW50ZXJmYWNlIFN0cmluZ09wdGlvbnMge1xuICAvKipcbiAgICogb3ZlcndyaXRlIG9yIHBhc3MgeW91ciBvd24gbWFwcGluZ3MuXG4gICAqIGV4aXN0aW5nIG1hcHBpbmdzIHdpbGwgYmUgb3ZlcndyaXR0ZW4sIGVsc2UgaXQnbGwgYmUgYXBwZW5kZWQgdG8gZGVmYXVsdHNcbiAgICovXG4gIG1hcHBpbmdzPzogTWFwcGluZ3M7XG59XG5cbmludGVyZmFjZSBSZWdleE9wdGlvbnMgZXh0ZW5kcyBTdHJpbmdPcHRpb25zIHtcbiAgLyoqXG4gICAqIFJlZ0V4cCBmbGFncywgaXVtLiBEZWZhdWx0cyB0byBpXG4gICAqL1xuICBmbGFncz86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIERpYWNyaXRpY1JlZ2V4IHtcbiAgLyoqIEdlbmVyYXRlIGEgdGhhdCByZXR1cm5zIGEgUmVnRXhwLCB0aGF0IGNhbiBiZSByZXVzZWQgd2l0aCB0aGUgc2FtZSBvcHRpb25zICovXG4gIHRvUmVnZXgob3B0aW9uczogUmVnZXhPcHRpb25zID0ge30pOiAoaW5wdXQ6IHN0cmluZykgPT4gUmVnRXhwIHtcbiAgICBjb25zdCBpbm5lck1hcHBpbmdzID0gdGhpcy5tZXJnZU1hcHBpbmdzKHR5cGVvZiBvcHRpb25zLm1hcHBpbmdzID09PSAnb2JqZWN0JyA/IG9wdGlvbnMubWFwcGluZ3MgOiBudWxsKTtcblxuICAgIHJldHVybiAoaW5wdXQ6IHN0cmluZyk6IFJlZ0V4cCA9PiB7XG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cCh0aGlzLnJlcGxhY2VyKGlucHV0LCBpbm5lck1hcHBpbmdzKSwgdHlwZW9mIG9wdGlvbnMuZmxhZ3MgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5mbGFncyA6ICdpJyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKiBHZW5lcmF0ZSBhIHRoYXQgcmV0dXJucyBhIHN0cmluZywgdGhhdCBjYW4gYmUgcmV1c2VkIHdpdGggdGhlIHNhbWUgb3B0aW9ucyAqL1xuICB0b1N0cmluZyhvcHRpb25zOiBTdHJpbmdPcHRpb25zID0ge30pOiAoaW5wdXQ6IHN0cmluZykgPT4gc3RyaW5nIHtcbiAgICBjb25zdCBpbm5lck1hcHBpbmdzID0gdGhpcy5tZXJnZU1hcHBpbmdzKHR5cGVvZiBvcHRpb25zLm1hcHBpbmdzID09PSAnb2JqZWN0JyA/IG9wdGlvbnMubWFwcGluZ3MgOiBudWxsKTtcblxuICAgIHJldHVybiAoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBsYWNlcihpbnB1dCwgaW5uZXJNYXBwaW5ncyk7XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgbWVyZ2VNYXBwaW5ncyhpbm5lck1hcHBpbmdzPzogTWFwcGluZ3MpIHtcbiAgICBjb25zdCBiYXNlOiBNYXBwaW5ncyA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBtYXBwaW5nIGluIE1BUFBJTkdTKSB7XG4gICAgICBpZiAoTUFQUElOR1MuaGFzT3duUHJvcGVydHkobWFwcGluZykpIHtcbiAgICAgICAgYmFzZVttYXBwaW5nXSA9IE1BUFBJTkdTW21hcHBpbmddO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbm5lck1hcHBpbmdzKSB7XG4gICAgICBmb3IgKGNvbnN0IG1hcHBpbmcgaW4gaW5uZXJNYXBwaW5ncykge1xuICAgICAgICBpZiAoaW5uZXJNYXBwaW5ncy5oYXNPd25Qcm9wZXJ0eShtYXBwaW5nKSkge1xuICAgICAgICAgIGJhc2VbbWFwcGluZ10gPSBpbm5lck1hcHBpbmdzW21hcHBpbmddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICBwcml2YXRlIHJlcGxhY2VyKGlucHV0OiBzdHJpbmcsIG1hcHBpbmdzOiBNYXBwaW5ncyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGlucHV0LnNwbGl0KCcnKS5tYXAoKGxldHRlcjogc3RyaW5nKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IG1hcHBpbmcgaW4gbWFwcGluZ3MpIHtcbiAgICAgICAgaWYgKG1hcHBpbmcgJiYgbWFwcGluZyAhPT0gbWFwcGluZ3NbbWFwcGluZ10gJiYgKG1hcHBpbmcgPT09IGxldHRlciB8fCBtYXBwaW5nc1ttYXBwaW5nXS5pbmRleE9mKGxldHRlcikgIT09IC0xKSkge1xuICAgICAgICAgIGxldHRlciA9IEFycmF5LmlzQXJyYXkobWFwcGluZ3NbbWFwcGluZ10pID8gKCBtYXBwaW5nc1ttYXBwaW5nXSBhcyBzdHJpbmdbXSApLmpvaW4oJycpIDogYFske21hcHBpbmdzW21hcHBpbmddfV1gO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbGV0dGVyO1xuICAgIH0pLmpvaW4oJycpO1xuICB9XG59XG4iXX0=