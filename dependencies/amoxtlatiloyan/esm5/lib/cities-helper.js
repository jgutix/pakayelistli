import { cities } from './cities';
import { DiacriticRegex } from './diacritic-regex';
import { map, startWith } from 'rxjs/operators';
var CitiesHelper = /** @class */ (function () {
    function CitiesHelper(cityCtrl) {
        this.cities = cities;
        this.cities = this.cities.sort(function (a, b) {
            if (a[1] < b[1]) {
                return -1;
            }
            if (a[1] > b[1]) {
                return 1;
            }
            return 0;
        });
        this.cityCtrl = cityCtrl;
        this.regex = new DiacriticRegex();
    }
    CitiesHelper.isValidCity = function (city) {
        return cities.map(function (item) { return item[1]; }).indexOf(city) !== -1;
    };
    CitiesHelper.prototype.getFilteredCitiesObservable = function () {
        var _this = this;
        // TODO: crear directiva
        return this.cityCtrl.valueChanges.pipe(startWith(null), map(function (name) { return _this.filterCities(name); }));
    };
    CitiesHelper.prototype.filterCities = function (val) {
        var _this = this;
        return val ? this.cities.filter(function (c) { return _this.regex.toRegex({ flags: 'gi' })(val).test(c[1]); })
            : this.cities;
    };
    return CitiesHelper;
}());
export { CitiesHelper };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2l0aWVzLWhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2Ftb3h0bGF0aWxveWFuLyIsInNvdXJjZXMiOlsibGliL2NpdGllcy1oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUVoQyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5QztJQUtFLHNCQUFZLFFBQXFCO1FBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2YsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUNYO1lBRUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNmLE9BQU8sQ0FBQyxDQUFDO2FBQ1Y7WUFDRCxPQUFPLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFTSx3QkFBVyxHQUFsQixVQUFtQixJQUFZO1FBQzdCLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBUCxDQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELGtEQUEyQixHQUEzQjtRQUFBLGlCQU9DO1FBTkMsd0JBQXdCO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUNwQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ2YsR0FBRyxDQUFDLFVBQUMsSUFBWSxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQyxDQUMvQyxDQUFDO0lBRUosQ0FBQztJQUVPLG1DQUFZLEdBQXBCLFVBQXFCLEdBQVc7UUFBaEMsaUJBR0M7UUFGQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBakQsQ0FBaUQsQ0FBQztZQUNyRixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDLEFBdENELElBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGb3JtQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtjaXRpZXN9IGZyb20gJy4vY2l0aWVzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0RpYWNyaXRpY1JlZ2V4fSBmcm9tICcuL2RpYWNyaXRpYy1yZWdleCc7XG5pbXBvcnQge21hcCwgc3RhcnRXaXRofSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjbGFzcyBDaXRpZXNIZWxwZXIge1xuICBjaXR5Q3RybDogYW55O1xuICBwcml2YXRlIHJlZ2V4OiBEaWFjcml0aWNSZWdleDtcbiAgcHJpdmF0ZSByZWFkb25seSBjaXRpZXM6IHN0cmluZ1tdW107XG5cbiAgY29uc3RydWN0b3IoY2l0eUN0cmw6IEZvcm1Db250cm9sKSB7XG4gICAgdGhpcy5jaXRpZXMgPSBjaXRpZXM7XG4gICAgdGhpcy5jaXRpZXMgPSB0aGlzLmNpdGllcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBpZiAoYVsxXSA8IGJbMV0pIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuXG4gICAgICBpZiAoYVsxXSA+IGJbMV0pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9KTtcbiAgICB0aGlzLmNpdHlDdHJsID0gY2l0eUN0cmw7XG4gICAgdGhpcy5yZWdleCA9IG5ldyBEaWFjcml0aWNSZWdleCgpO1xuICB9XG5cbiAgc3RhdGljIGlzVmFsaWRDaXR5KGNpdHk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBjaXRpZXMubWFwKGl0ZW0gPT4gaXRlbVsxXSkuaW5kZXhPZihjaXR5KSAhPT0gLTE7XG4gIH1cblxuICBnZXRGaWx0ZXJlZENpdGllc09ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICAvLyBUT0RPOiBjcmVhciBkaXJlY3RpdmFcbiAgICByZXR1cm4gdGhpcy5jaXR5Q3RybC52YWx1ZUNoYW5nZXMucGlwZShcbiAgICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICAgIG1hcCgobmFtZTogc3RyaW5nKSA9PiB0aGlzLmZpbHRlckNpdGllcyhuYW1lKSlcbiAgICApO1xuXG4gIH1cblxuICBwcml2YXRlIGZpbHRlckNpdGllcyh2YWw6IHN0cmluZykge1xuICAgIHJldHVybiB2YWwgPyB0aGlzLmNpdGllcy5maWx0ZXIoYyA9PiB0aGlzLnJlZ2V4LnRvUmVnZXgoe2ZsYWdzOiAnZ2knfSkodmFsKS50ZXN0KGNbMV0pKVxuICAgICAgOiB0aGlzLmNpdGllcztcbiAgfVxufVxuIl19