/**
 * expect the transliterated value as key, and a string with replacements
 */
const MAPPINGS = {
    'a': String.fromCharCode(65, 97, 192, 224, 193, 225, 194, 226, 195, 227, 196, 228, 229, 258, 259),
    'e': String.fromCharCode(69, 101, 200, 232, 201, 233, 202, 234, 203, 235),
    'i': String.fromCharCode(73, 105, 204, 236, 205, 237, 206, 238, 207, 239),
    'o': String.fromCharCode(79, 111, 210, 242, 211, 243, 212, 244, 213, 245, 214, 246),
    'n': String.fromCharCode(78, 110, 209, 241),
    'u': String.fromCharCode(85, 117, 217, 249, 218, 250, 219, 251, 220, 252),
    'c': String.fromCharCode(67, 99, 199, 231),
    'y': String.fromCharCode(89, 121, 221, 253, 159, 255),
};
export class DiacriticRegex {
    /** Generate a that returns a RegExp, that can be reused with the same options */
    toRegex(options = {}) {
        const innerMappings = this.mergeMappings(typeof options.mappings === 'object' ? options.mappings : null);
        return (input) => {
            return new RegExp(this.replacer(input, innerMappings), typeof options.flags === 'string' ? options.flags : 'i');
        };
    }
    /** Generate a that returns a string, that can be reused with the same options */
    toString(options = {}) {
        const innerMappings = this.mergeMappings(typeof options.mappings === 'object' ? options.mappings : null);
        return (input) => {
            return this.replacer(input, innerMappings);
        };
    }
    mergeMappings(innerMappings) {
        const base = {};
        for (const mapping in MAPPINGS) {
            if (MAPPINGS.hasOwnProperty(mapping)) {
                base[mapping] = MAPPINGS[mapping];
            }
        }
        if (innerMappings) {
            for (const mapping in innerMappings) {
                if (innerMappings.hasOwnProperty(mapping)) {
                    base[mapping] = innerMappings[mapping];
                }
            }
        }
        return base;
    }
    replacer(input, mappings) {
        return input.split('').map((letter) => {
            for (const mapping in mappings) {
                if (mapping && mapping !== mappings[mapping] && (mapping === letter || mappings[mapping].indexOf(letter) !== -1)) {
                    letter = Array.isArray(mappings[mapping]) ? mappings[mapping].join('') : `[${mappings[mapping]}]`;
                    break;
                }
            }
            return letter;
        }).join('');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhY3JpdGljLXJlZ2V4LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW1veHRsYXRpbG95YW4vIiwic291cmNlcyI6WyJsaWIvZGlhY3JpdGljLXJlZ2V4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQWE7SUFDekIsR0FBRyxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDakcsR0FBRyxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ3pFLEdBQUcsRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUN6RSxHQUFHLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNuRixHQUFHLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDM0MsR0FBRyxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxF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LENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO29CQUNsSCxNQUFNO2lCQUNQO2FBQ0Y7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDZCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3BpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vcG9jZXNhci9qcy1kaWFjcml0aWMtcmVnZXggd2l0aCBzb21lIG1vZGlmaWNhdGlvbnNcbmludGVyZmFjZSBNYXBwaW5ncyB7XG4gIFtpbmRleDogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW107XG59XG5cbi8qKlxuICogZXhwZWN0IHRoZSB0cmFuc2xpdGVyYXRlZCB2YWx1ZSBhcyBrZXksIGFuZCBhIHN0cmluZyB3aXRoIHJlcGxhY2VtZW50c1xuICovXG5jb25zdCBNQVBQSU5HUzogTWFwcGluZ3MgPSB7XG4gICdhJzogU3RyaW5nLmZyb21DaGFyQ29kZSg2NSwgOTcsIDE5MiwgMjI0LCAxOTMsIDIyNSwgMTk0LCAyMjYsIDE5NSwgMjI3LCAxOTYsIDIyOCwgMjI5LCAyNTgsIDI1OSksXG4gICdlJzogU3RyaW5nLmZyb21DaGFyQ29kZSg2OSwgMTAxLCAyMDAsIDIzMiwgMjAxLCAyMzMsIDIwMiwgMjM0LCAyMDMsIDIzNSksXG4gICdpJzogU3RyaW5nLmZyb21DaGFyQ29kZSg3MywgMTA1LCAyMDQsIDIzNiwgMjA1LCAyMzcsIDIwNiwgMjM4LCAyMDcsIDIzOSksXG4gICdvJzogU3RyaW5nLmZyb21DaGFyQ29kZSg3OSwgMTExLCAyMTAsIDI0MiwgMjExLCAyNDMsIDIxMiwgMjQ0LCAyMTMsIDI0NSwgMjE0LCAyNDYpLFxuICAnbic6IFN0cmluZy5mcm9tQ2hhckNvZGUoNzgsIDExMCwgMjA5LCAyNDEpLFxuICAndSc6IFN0cmluZy5mcm9tQ2hhckNvZGUoODUsIDExNywgMjE3LCAyNDksIDIxOCwgMjUwLCAyMTksIDI1MSwgMjIwLCAyNTIpLFxuICAnYyc6IFN0cmluZy5mcm9tQ2hhckNvZGUoNjcsIDk5LCAxOTksIDIzMSksXG4gICd5JzogU3RyaW5nLmZyb21DaGFyQ29kZSg4OSwgMTIxLCAyMjEsIDI1MywgMTU5LCAyNTUpLFxufVxuXG5pbnRlcmZhY2UgU3RyaW5nT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBvdmVyd3JpdGUgb3IgcGFzcyB5b3VyIG93biBtYXBwaW5ncy5cbiAgICogZXhpc3RpbmcgbWFwcGluZ3Mgd2lsbCBiZSBvdmVyd3JpdHRlbiwgZWxzZSBpdCdsbCBiZSBhcHBlbmRlZCB0byBkZWZhdWx0c1xuICAgKi9cbiAgbWFwcGluZ3M/OiBNYXBwaW5ncztcbn1cblxuaW50ZXJmYWNlIFJlZ2V4T3B0aW9ucyBleHRlbmRzIFN0cmluZ09wdGlvbnMge1xuICAvKipcbiAgICogUmVnRXhwIGZsYWdzLCBpdW0uIERlZmF1bHRzIHRvIGlcbiAgICovXG4gIGZsYWdzPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRGlhY3JpdGljUmVnZXgge1xuICAvKiogR2VuZXJhdGUgYSB0aGF0IHJldHVybnMgYSBSZWdFeHAsIHRoYXQgY2FuIGJlIHJldXNlZCB3aXRoIHRoZSBzYW1lIG9wdGlvbnMgKi9cbiAgdG9SZWdleChvcHRpb25zOiBSZWdleE9wdGlvbnMgPSB7fSk6IChpbnB1dDogc3RyaW5nKSA9PiBSZWdFeHAge1xuICAgIGNvbnN0IGlubmVyTWFwcGluZ3MgPSB0aGlzLm1lcmdlTWFwcGluZ3ModHlwZW9mIG9wdGlvbnMubWFwcGluZ3MgPT09ICdvYmplY3QnID8gb3B0aW9ucy5tYXBwaW5ncyA6IG51bGwpO1xuXG4gICAgcmV0dXJuIChpbnB1dDogc3RyaW5nKTogUmVnRXhwID0+IHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHRoaXMucmVwbGFjZXIoaW5wdXQsIGlubmVyTWFwcGluZ3MpLCB0eXBlb2Ygb3B0aW9ucy5mbGFncyA9PT0gJ3N0cmluZycgPyBvcHRpb25zLmZsYWdzIDogJ2knKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqIEdlbmVyYXRlIGEgdGhhdCByZXR1cm5zIGEgc3RyaW5nLCB0aGF0IGNhbiBiZSByZXVzZWQgd2l0aCB0aGUgc2FtZSBvcHRpb25zICovXG4gIHRvU3RyaW5nKG9wdGlvbnM6IFN0cmluZ09wdGlvbnMgPSB7fSk6IChpbnB1dDogc3RyaW5nKSA9PiBzdHJpbmcge1xuICAgIGNvbnN0IGlubmVyTWFwcGluZ3MgPSB0aGlzLm1lcmdlTWFwcGluZ3ModHlwZW9mIG9wdGlvbnMubWFwcGluZ3MgPT09ICdvYmplY3QnID8gb3B0aW9ucy5tYXBwaW5ncyA6IG51bGwpO1xuXG4gICAgcmV0dXJuIChpbnB1dDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnJlcGxhY2VyKGlucHV0LCBpbm5lck1hcHBpbmdzKTtcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBtZXJnZU1hcHBpbmdzKGlubmVyTWFwcGluZ3M/OiBNYXBwaW5ncykge1xuICAgIGNvbnN0IGJhc2U6IE1hcHBpbmdzID0ge307XG5cbiAgICBmb3IgKGNvbnN0IG1hcHBpbmcgaW4gTUFQUElOR1MpIHtcbiAgICAgIGlmIChNQVBQSU5HUy5oYXNPd25Qcm9wZXJ0eShtYXBwaW5nKSkge1xuICAgICAgICBiYXNlW21hcHBpbmddID0gTUFQUElOR1NbbWFwcGluZ107XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlubmVyTWFwcGluZ3MpIHtcbiAgICAgIGZvciAoY29uc3QgbWFwcGluZyBpbiBpbm5lck1hcHBpbmdzKSB7XG4gICAgICAgIGlmIChpbm5lck1hcHBpbmdzLmhhc093blByb3BlcnR5KG1hcHBpbmcpKSB7XG4gICAgICAgICAgYmFzZVttYXBwaW5nXSA9IGlubmVyTWFwcGluZ3NbbWFwcGluZ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuXG4gIHByaXZhdGUgcmVwbGFjZXIoaW5wdXQ6IHN0cmluZywgbWFwcGluZ3M6IE1hcHBpbmdzKTogc3RyaW5nIHtcbiAgICByZXR1cm4gaW5wdXQuc3BsaXQoJycpLm1hcCgobGV0dGVyOiBzdHJpbmcpID0+IHtcbiAgICAgIGZvciAoY29uc3QgbWFwcGluZyBpbiBtYXBwaW5ncykge1xuICAgICAgICBpZiAobWFwcGluZyAmJiBtYXBwaW5nICE9PSBtYXBwaW5nc1ttYXBwaW5nXSAmJiAobWFwcGluZyA9PT0gbGV0dGVyIHx8IG1hcHBpbmdzW21hcHBpbmddLmluZGV4T2YobGV0dGVyKSAhPT0gLTEpKSB7XG4gICAgICAgICAgbGV0dGVyID0gQXJyYXkuaXNBcnJheShtYXBwaW5nc1ttYXBwaW5nXSkgPyAoIG1hcHBpbmdzW21hcHBpbmddIGFzIHN0cmluZ1tdICkuam9pbignJykgOiBgWyR7bWFwcGluZ3NbbWFwcGluZ119XWA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBsZXR0ZXI7XG4gICAgfSkuam9pbignJyk7XG4gIH1cbn1cbiJdfQ==