{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://agmx-core/lib/services/maps-api-loader/lazy-maps-api-loader.ts","ng://agmx-core/lib/services/maps-api-loader/maps-api-loader.ts","ng://agmx-core/lib/services/google-maps-api-wrapper.ts","ng://agmx-core/lib/services/managers/circle-manager.ts","ng://agmx-core/lib/services/managers/marker-manager.ts","ng://agmx-core/lib/services/managers/info-window-manager.ts","ng://agmx-core/lib/services/managers/polygon-manager.ts","ng://agmx-core/lib/services/managers/polyline-manager.ts","ng://agmx-core/lib/services/managers/kml-layer-manager.ts","ng://agmx-core/lib/services/managers/data-layer-manager.ts","ng://agmx-core/lib/services/managers/search-box-manager.ts","ng://agmx-core/lib/directives/map.ts","ng://agmx-core/lib/directives/circle.ts","ng://agmx-core/lib/directives/info-window.ts","ng://agmx-core/lib/directives/kml-layer.ts","ng://agmx-core/lib/directives/data-layer.ts","ng://agmx-core/lib/directives/marker.ts","ng://agmx-core/lib/directives/polygon.ts","ng://agmx-core/lib/directives/polyline-point.ts","ng://agmx-core/lib/directives/polyline.ts","ng://agmx-core/lib/directives/search-box.ts","ng://agmx-core/lib/directives/control.ts","ng://agmx-core/lib/directives/route.ts","ng://agmx-core/lib/utils/browser-globals.ts","ng://agmx-core/lib/services/google-maps-types.ts","ng://agmx-core/lib/services/maps-api-loader/noop-maps-api-loader.ts","ng://agmx-core/lib/agmx-core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","__spread","concat","GoogleMapsScriptProtocol","MapsAPILoader","Injectable","providedIn","GoogleMapsAPIWrapper","_loader","_zone","_this","this","_map","Promise","resolve","_mapResolver","prototype","createMap","el","mapOptions","runOutsideAngular","load","then","map","google","maps","Map","setMapOptions","options","setOptions","createMarker","addToMap","Marker","createInfoWindow","InfoWindow","createCircle","strokePosition","StrokePosition","Circle","createRectangle","Rectangle","createPolyline","getNativeMap","line","Polyline","setMap","createPolygon","polygon","Polygon","createDataLayer","data","Data","createTransitLayer","newLayer","TransitLayer","visible","createBicyclingLayer","BicyclingLayer","containsLocation","latLng","geometry","poly","subscribeToMapEvent","eventName","Observable","observer","addListener","arg","run","clearInstanceListeners","event","setCenter","getZoom","getBounds","getMapTypeId","setZoom","zoom","getCenter","getControls","controls","panTo","panBy","x","y","fitBounds","padding","panToBounds","getTrueNativeMap","triggerMapEvent","trigger","NgZone","CircleManager","_apiWrapper","_circles","addCircle","circle","set","center","lat","latitude","lng","longitude","clickable","draggable","editable","fillColor","fillOpacity","radius","strokeColor","strokeOpacity","strokeWeight","zIndex","removeCircle","get","delete","getRadius","setEditable","setDraggable","setVisible","setRadius","createEventObservable","create","listener","remove","MarkerManager","_mapsWrapper","_markers","deleteMarker","marker","updateMarkerPosition","setPosition","updateTitle","setTitle","title","updateLabel","setLabel","label","updateDraggable","updateIcon","setIcon","iconUrl","updateOpacity","setOpacity","opacity","updateVisible","updateZIndex","setZIndex","updateClickable","setClickable","updateAnimation","animation","setAnimation","Animation","addMarker","markerPromise","position","icon","getNativeMarker","InfoWindowManager","_markerManager","_infoWindows","deleteInfoWindow","infoWindow","iWindow","close","open","w","hostMarker","addInfoWindow","content","maxWidth","disableAutoPan","infoWindowPromise","PolygonManager","_polygons","addPolygon","path","polygonPromise","geodesic","paths","updatePolygon","l","setPaths","setPolygonOptions","deletePolygon","PolylineManager","_polylines","_convertPoints","_getPoints","point","addPolyline","PolylineManager_1","polylinePromise","updatePolylinePoints","setPath","setPolylineOptions","deletePolyline","createEventObservableOnPath","getPath","index","getAt","KmlLayerManager","_wrapper","_layers","addKmlLayer","layer","KmlLayer","preserveViewport","screenOverlays","suppressInfoWindows","url","deleteKmlLayer","DataLayerManager","addDataLayer","style","geoJson","getDataFeatures","features","deleteDataLayer","updateGeoJson","forEach","feature","indexOf","splice","setDataOptions","setControlPosition","controlPosition","setControls","setDrawingMode","drawingMode","setStyle","reject","addGeoJson","loadGeoJson","SearchBoxManager","searchBox","getSearchBoxEl","AgmMap","_elem","disableDoubleClickZoom","disableDefaultUI","scrollwheel","keyboardShortcuts","zoomControl","styles","usePanning","streetViewControl","scaleControl","mapTypeControl","panControl","rotateControl","fullscreenControl","mapTypeId","clickableIcons","gestureHandling","mapClick","EventEmitter","mapRightClick","mapDblClick","centerChange","boundsChange","mapTypeIdChange","idle","zoomChange","mapReady","_observableSubscriptions","ngOnInit","container","nativeElement","querySelector","_initMapInstance","ngOnDestroy","s","unsubscribe","ngOnChanges","changes","_updateMapOptionsChanges","_updatePosition","triggerResize","recenter","setTimeout","_fitBounds","_setCenter","minZoom","maxZoom","backgroundColor","draggableCursor","draggingCursor","zoomControlOptions","streetViewControlOptions","scaleControlOptions","mapTypeControlOptions","panControlOptions","rotateControlOptions","fullscreenControlOptions","emit","_handleMapCenterChange","_handleMapZoomChange","_handleMapMouseEvents","_handleBoundsChange","_handleMapTypeIdChange","_handleIdleEvent","keys","filter","k","AgmMap_1","_mapOptionsAttributes","currentValue","newCenter","subscribe","bounds","z","name","emitter","coords","ElementRef","Input","Output","Component","selector","providers","template","AgmCircle","_manager","circleClick","circleDblClick","drag","dragEnd","dragStart","mouseDown","mouseMove","mouseOut","mouseOver","mouseUp","radiusChange","rightClick","_circleAddedToManager","_eventSubscriptions","_registerEventListeners","_updateCircleOptionsChanges","optionKeys","AgmCircle_1","_mapOptions","events","eventEmitter","Directive","infoWindowId","AgmInfoWindow","_infoWindowManager","_el","isOpen","infoWindowClose","_infoWindowAddedToManager","_id","toString","_updateOpenState","_setInfoWindowOptions","id","AgmInfoWindow_1","_infoWindowOptionsInputs","layerId","AgmKmlLayer","layerClick","defaultViewportChange","statusChange","_addedToManager","_subscriptions","_addEventListeners","_updatePolygonOptions","AgmKmlLayer_1","_kmlLayerOptions","reduce","obj","handler","ev","os","AgmDataLayer","geoJsonChange","dataOptions","AgmDataLayer_1","_dataOptionsAttributes","markerId","AgmMarker","openInfoWindow","markerClick","QueryList","_markerAddedToManger","ngAfterContentInit","handleInfoWindowUpdate","Error","cs","ds","mover","mout","ContentChildren","inputs","outputs","AgmPolygon","_polygonManager","polyClick","polyDblClick","polyDrag","polyDragEnd","polyDragStart","polyMouseDown","polyMouseMove","polyMouseOut","polyMouseOver","polyMouseUp","polyRightClick","_polygonAddedToManager","_init","AgmPolygon_1","_polygonOptionsAttributes","AgmPolylinePoint","positionChanged","polylineId","AgmPolyline","_polylineManager","lineClick","lineDblClick","lineDrag","lineDragEnd","lineDragStart","lineMouseDown","lineMouseMove","lineMouseOut","lineMouseOver","lineMouseUp","lineRightClick","pointUpdated","_polylineAddedToManager","points","attachObservables","AgmPolyline_1","_polylineOptionsAttributes","result","toArray","AgmSearchBox","gmapsApi","autoBoundResults","placesChange","getPlaces","autoBound","setBounds","updatePosition","undefined","places","SearchBox","panel","LatLngBounds","place","viewport","union","extend","location","console","log","ViewChild","AgmControl","elm","getElementIndex","previousValue","removeAt","elem","AgmRoute","optimized","displayed","nodes","alert","directionsDisplay","directionsService","DirectionsService","DirectionsRenderer","_a","first","others","slice","origin","destination","optimizeWaypoints","travelMode","TravelMode","DRIVING","_b","reverse","middle","waypoints","item","stopover","route","response","status","DirectionsStatus","OK","setDirections","model","directionResult","window","display","WindowRef","getNativeWindow","DocumentRef","getNativeDocument","document","BROWSER_GLOBALS_PROVIDERS","SymbolPath","MapTypeId","MapTypeControlStyle","ScaleControlStyle","ZoomControlStyle","GeocoderLocationType","GeocoderStatus","LAZY_MAPS_API_CONFIG","InjectionToken","LazyMapsAPILoader","config","localeId","_super","_SCRIPT_ID","callbackName","_config","_windowRef","_documentRef","__","constructor","__extends","_scriptLoadingPromise","scriptOnPage","getElementById","_assignScriptLoadingPromise","script","createElement","type","async","defer","src","_getScriptSrc","body","appendChild","protocol","HTTPS","AUTO","HTTP","hostAndPath","queryParams","v","apiVersion","callback","apiKey","client","clientId","channel","libraries","region","language","isArray","join","entry","scriptElem","onerror","Optional","Inject","args","LOCALE_ID","NoOpMapsAPILoader","AgmxCoreModule","forRoot","lazyMapsAPILoaderConfig","ngModule","AgmxCoreModule_1","provide","useClass","useValue","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {Inject, Injectable, InjectionToken, LOCALE_ID, Optional} from '@angular/core';\n\nimport {DocumentRef, WindowRef} from '../../utils/browser-globals';\n\nimport {MapsAPILoader} from './maps-api-loader';\n\nexport enum GoogleMapsScriptProtocol {\n  HTTP = 1,\n  HTTPS = 2,\n  AUTO = 3\n}\n\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\nexport const LAZY_MAPS_API_CONFIG = new InjectionToken<LazyMapsAPILoaderConfigLiteral>('angular-google-maps LAZY_MAPS_API_CONFIG');\n\n/**\n * Configuration for the {@link LazyMapsAPILoader}.\n */\nexport interface LazyMapsAPILoaderConfigLiteral {\n  /**\n   * The Google Maps API Key (see:\n   * https://developers.google.com/maps/documentation/javascript/get-api-key)\n   */\n  apiKey?: string;\n\n  /**\n   * The Google Maps client ID (for premium plans).\n   * When you have a Google Maps APIs Premium Plan license, you must authenticate\n   * your application with either an API key or a client ID.\n   * The Google Maps API will fail to load if both a client ID and an API key are included.\n   */\n  clientId?: string;\n\n  /**\n   * The Google Maps channel name (for premium plans).\n   * A channel parameter is an optional parameter that allows you to track usage under your client\n   * ID by assigning a distinct channel to each of your applications.\n   */\n  channel?: string;\n\n  /**\n   * Google Maps API version.\n   */\n  apiVersion?: string;\n\n  /**\n   * Host and Path used for the `<script>` tag.\n   */\n  hostAndPath?: string;\n\n  /**\n   * Protocol used for the `<script>` tag.\n   */\n  protocol?: GoogleMapsScriptProtocol;\n\n  /**\n   * Defines which Google Maps libraries should get loaded.\n   */\n  libraries?: string[];\n\n  /**\n   * The default bias for the map behavior is US.\n   * If you wish to alter your application to serve different map tiles or bias the\n   * application, you can overwrite the default behavior (US) by defining a `region`.\n   * See https://developers.google.com/maps/documentation/javascript/basics#Region\n   */\n  region?: string;\n\n  /**\n   * The Google Maps API uses the browser's preferred language when displaying\n   * textual information. If you wish to overwrite this behavior and force the API\n   * to use a given language, you can use this setting.\n   * See https://developers.google.com/maps/documentation/javascript/basics#Language\n   */\n  language?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LazyMapsAPILoader extends MapsAPILoader {\n  protected _scriptLoadingPromise: Promise<void>;\n  protected _config: LazyMapsAPILoaderConfigLiteral;\n  protected _windowRef: WindowRef;\n  protected _documentRef: DocumentRef;\n  protected readonly _SCRIPT_ID: string = 'agmGoogleMapsApiScript';\n  protected readonly callbackName: string = `agmLazyMapsAPILoader`;\n\n  constructor(@Optional() @Inject(LAZY_MAPS_API_CONFIG) config: any = null, w: WindowRef, d: DocumentRef,\n   @Inject(LOCALE_ID) private localeId: string) {\n    super();\n    this._config = config || {};\n    this._windowRef = w;\n    this._documentRef = d;\n  }\n\n  load(): Promise<void> {\n    const window = <any>this._windowRef.getNativeWindow();\n    if (window.google && window.google.maps) {\n      // Google maps already loaded on the page.\n      return Promise.resolve();\n    }\n\n    /*if (this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID)) {\n      // this can happen in HMR situations or Stackblitz.io editors.\n      return Promise.resolve();\n    }*/\n\n    if (this._scriptLoadingPromise) {\n      return this._scriptLoadingPromise;\n    }\n\n    // this can happen in HMR situations or Stackblitz.io editors.\n    const scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n    if (scriptOnPage) {\n      this._assignScriptLoadingPromise(scriptOnPage);\n      return this._scriptLoadingPromise;\n    }\n\n    const script = this._documentRef.getNativeDocument().createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.defer = true;\n    script.id = this._SCRIPT_ID;\n    script.src = this._getScriptSrc(this.callbackName);\n    this._assignScriptLoadingPromise(script);\n    this._documentRef.getNativeDocument().body.appendChild(script);\n    return this._scriptLoadingPromise;\n  }\n\n  protected _getScriptSrc(callbackName: string): string {\n    let protocolType: GoogleMapsScriptProtocol =\n        (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;\n    let protocol: string;\n\n    switch (protocolType) {\n      case GoogleMapsScriptProtocol.AUTO:\n        protocol = '';\n        break;\n      case GoogleMapsScriptProtocol.HTTP:\n        protocol = 'http:';\n        break;\n      case GoogleMapsScriptProtocol.HTTPS:\n        protocol = 'https:';\n        break;\n    }\n\n    const hostAndPath: string = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n    const queryParams: {[key: string]: string | Array<string>} = {\n      v: this._config.apiVersion || 'quarterly',\n      callback: callbackName,\n      key: this._config.apiKey,\n      client: this._config.clientId,\n      channel: this._config.channel,\n      libraries: this._config.libraries,\n      region: this._config.region,\n      language: this._config.language || (this.localeId !== 'en-US' ? this.localeId : null),\n    };\n    const params: string = Object.keys(queryParams)\n                               .filter((k: string) => queryParams[k] != null)\n                               .filter((k: string) => {\n                                 // remove empty arrays\n                                 return !Array.isArray(queryParams[k]) ||\n                                     (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\n                               })\n                               .map((k: string) => {\n                                 // join arrays as comma seperated strings\n                                 let i = queryParams[k];\n                                 if (Array.isArray(i)) {\n                                   return {key: k, value: i.join(',')};\n                                 }\n                                 return {key: k, value: queryParams[k]};\n                               })\n                               .map((entry: {key: string, value: string}) => {\n                                 return `${entry.key}=${entry.value}`;\n                               })\n                               .join('&');\n    return `${protocol}//${hostAndPath}?${params}`;\n  }\n\n  private _assignScriptLoadingPromise(scriptElem: HTMLElement) {\n    this._scriptLoadingPromise = new Promise<void>((resolve: Function, reject: Function) => {\n      (this._windowRef.getNativeWindow() as any)[this.callbackName] = () => {\n        resolve();\n      };\n\n      scriptElem.onerror = (error: Event) => {\n        reject(error);\n      };\n    });\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport abstract class MapsAPILoader {\n  abstract load(): Promise<void>;\n}\n","import {Injectable, NgZone} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport * as mapTypes from './google-maps-types';\nimport {Polyline} from './google-maps-types';\nimport {PolylineOptions} from './google-maps-types';\nimport {MapsAPILoader} from './maps-api-loader/maps-api-loader';\n\n// todo: add types for this\ndeclare var google: any;\n\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoogleMapsAPIWrapper {\n  private _map: Promise<mapTypes.GoogleMap | google.maps.Map>;\n  private _mapResolver: (value?: mapTypes.GoogleMap) => void;\n\n  constructor(private _loader: MapsAPILoader, private _zone: NgZone) {\n    this._map =\n        new Promise<mapTypes.GoogleMap>((resolve: () => void) => { this._mapResolver = resolve; });\n  }\n\n  createMap(el: HTMLElement, mapOptions: mapTypes.MapOptions): Promise<void> {\n    return this._zone.runOutsideAngular( () => {\n      return this._loader.load().then(() => {\n        const map = new google.maps.Map(el, mapOptions);\n        this._mapResolver(<mapTypes.GoogleMap>map);\n        return;\n      });\n    });\n  }\n\n  setMapOptions(options: mapTypes.MapOptions) {\n    return this._zone.runOutsideAngular(() => {\n      this._map.then((m: mapTypes.GoogleMap) => { m.setOptions(options); });\n    });\n  }\n\n  /**\n   * Creates a google map marker with the map context\n   */\n  createMarker(options: mapTypes.MarkerOptions = <mapTypes.MarkerOptions>{}, addToMap: boolean = true):\n      Promise<mapTypes.Marker> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        if (addToMap) {\n          options.map = map;\n        }\n        return new google.maps.Marker(options);\n      });\n    });\n  }\n\n  createInfoWindow(options?: mapTypes.InfoWindowOptions): Promise<mapTypes.InfoWindow> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(() => { return new google.maps.InfoWindow(options); });\n    });\n  }\n\n  /**\n   * Creates a google.map.Circle for the current map.\n   */\n  createCircle(options: mapTypes.CircleOptions): Promise<mapTypes.Circle> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        if (typeof options.strokePosition === 'string') {\n          options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n        }\n        options.map = map;\n        return new google.maps.Circle(options);\n      });\n    });\n  }\n\n  /**\n   * Creates a google.map.Rectangle for the current map.\n   */\n  createRectangle(options: mapTypes.RectangleOptions): Promise<mapTypes.Rectangle> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        options.map = map;\n        return new google.maps.Rectangle(options);\n      });\n    });\n  }\n\n  createPolyline(options: PolylineOptions): Promise<Polyline> {\n    return this._zone.runOutsideAngular(() => {\n      return this.getNativeMap().then((map: mapTypes.GoogleMap) => {\n        let line = new google.maps.Polyline(options);\n        line.setMap(map);\n        return line;\n      });\n    });\n  }\n\n  createPolygon(options: mapTypes.PolygonOptions): Promise<mapTypes.Polygon> {\n    return this._zone.runOutsideAngular(() => {\n      return this.getNativeMap().then((map: mapTypes.GoogleMap) => {\n        let polygon = new google.maps.Polygon(options);\n        polygon.setMap(map);\n        return polygon;\n      });\n    });\n  }\n\n  /**\n   * Creates a new google.map.Data layer for the current map\n   */\n  createDataLayer(options?: mapTypes.DataOptions): Promise<mapTypes.Data> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(m => {\n        let data = new google.maps.Data(options);\n        data.setMap(m);\n        return data;\n      });\n    });\n  }\n\n  /**\n   * Creates a TransitLayer instance for a map\n   * @param options\n   */\n  /* @param {TransitLayerOptions} options - used for setting layer options\n   * @returns {Promise<TransitLayer>} a new transit layer object\n   */\n  createTransitLayer(options: mapTypes.TransitLayerOptions): Promise<mapTypes.TransitLayer>{\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        let newLayer: mapTypes.TransitLayer = new google.maps.TransitLayer();\n        newLayer.setMap(options.visible ? map : null);\n        return newLayer;\n      });\n    });\n  }\n\n  /**\n   * Creates a BicyclingLayer instance for a map\n   * @param options\n   */\n  /* @param {BicyclingLayerOptions} options - used for setting layer options\n  * @returns {Promise<BicyclingLayer>} a new bicycling layer object\n  */\n  createBicyclingLayer(options: mapTypes.BicyclingLayerOptions): Promise<mapTypes.BicyclingLayer>{\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        let newLayer: mapTypes.BicyclingLayer = new google.maps.BicyclingLayer();\n        newLayer.setMap(options.visible ? map : null);\n        return newLayer;\n      });\n    });\n  }\n\n  /**\n   * Determines if given coordinates are insite a Polygon path.\n   */\n  containsLocation(latLng: mapTypes.LatLngLiteral, polygon: mapTypes.Polygon): Promise<boolean> {\n    return google.maps.geometry.poly.containsLocation(latLng, polygon);\n  }\n\n  subscribeToMapEvent<E>(eventName: string): Observable<E> {\n    return new Observable((observer: Observer<E>) => {\n      this._map.then((m: mapTypes.GoogleMap) => {\n        m.addListener(eventName, (arg: E) => { this._zone.run(() => observer.next(arg)); });\n      });\n    });\n  }\n\n  clearInstanceListeners() {\n    return this._zone.runOutsideAngular(() => {\n      this._map.then((map: mapTypes.GoogleMap) => {\n        google.maps.event.clearInstanceListeners(map);\n      });\n    });\n  }\n\n  setCenter(latLng: mapTypes.LatLngLiteral): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.setCenter(latLng));\n    });\n  }\n\n  getZoom(): Promise<number> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.getZoom());\n    });\n  }\n\n  getBounds(): Promise<mapTypes.LatLngBounds> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.getBounds());\n    });\n  }\n\n  getMapTypeId(): Promise<mapTypes.MapTypeId> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.getMapTypeId());\n    });\n  }\n\n  setZoom(zoom: number): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.setZoom(zoom));\n    });\n  }\n\n  getCenter(): Promise<mapTypes.LatLng> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.getCenter());\n    });\n  }\n\n  getControls(): Promise<mapTypes.MVCArray<Node>[]> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.controls);\n    });\n  }\n\n  panTo(latLng: mapTypes.LatLng|mapTypes.LatLngLiteral): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.panTo(latLng));\n    });\n  }\n\n  panBy(x: number, y: number): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.panBy(x, y));\n    });\n  }\n\n  fitBounds(latLng: mapTypes.LatLngBounds|mapTypes.LatLngBoundsLiteral, padding?: number | mapTypes.Padding): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.fitBounds(latLng, padding));\n    });\n  }\n\n  panToBounds(latLng: mapTypes.LatLngBounds|mapTypes.LatLngBoundsLiteral, padding?: number | mapTypes.Padding): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.panToBounds(latLng, padding));\n    });\n  }\n\n  /**\n   * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n   */\n  getNativeMap(): Promise<mapTypes.GoogleMap> { return this._map as Promise<mapTypes.GoogleMap>; }\n\n  /**\n   * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n   */\n  getTrueNativeMap(): Promise<google.maps.Map> { return this._map as Promise<google.maps.Map>; }\n\n  /**\n   * Triggers the given event name on the map instance.\n   */\n  triggerMapEvent(eventName: string): Promise<void> {\n    return this._map.then((m) => google.maps.event.trigger(m, eventName));\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\n\nimport {Observable, Observer} from 'rxjs';\n\nimport {AgmCircle} from '../../directives/circle';\nimport {GoogleMapsAPIWrapper} from '../google-maps-api-wrapper';\nimport * as mapTypes from '../google-maps-types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CircleManager {\n  private _circles: Map<AgmCircle, Promise<mapTypes.Circle>> =\n      new Map<AgmCircle, Promise<mapTypes.Circle>>();\n\n  constructor(private _apiWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  addCircle(circle: AgmCircle) {\n    this._circles.set(circle, this._apiWrapper.createCircle({\n      center: {lat: circle.latitude, lng: circle.longitude},\n      clickable: circle.clickable,\n      draggable: circle.draggable,\n      editable: circle.editable,\n      fillColor: circle.fillColor,\n      fillOpacity: circle.fillOpacity,\n      radius: circle.radius,\n      strokeColor: circle.strokeColor,\n      strokeOpacity: circle.strokeOpacity,\n      strokePosition: circle.strokePosition,\n      strokeWeight: circle.strokeWeight,\n      visible: circle.visible,\n      zIndex: circle.zIndex\n    }));\n  }\n\n  /**\n   * Removes the given circle from the map.\n   */\n  removeCircle(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => {\n      c.setMap(null);\n      this._circles.delete(circle);\n    });\n  }\n\n  setOptions(circle: AgmCircle, options: mapTypes.CircleOptions): Promise<void> {\n    return this._circles.get(circle).then((c) => c.setOptions(options));\n  }\n\n  getBounds(circle: AgmCircle): Promise<mapTypes.LatLngBounds> {\n    return this._circles.get(circle).then((c) => c.getBounds());\n  }\n\n  getCenter(circle: AgmCircle): Promise<mapTypes.LatLng> {\n    return this._circles.get(circle).then((c) => c.getCenter());\n  }\n\n  getRadius(circle: AgmCircle): Promise<number> {\n    return this._circles.get(circle).then((c) => c.getRadius());\n  }\n\n  setCenter(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then(\n        (c) => { return c.setCenter({lat: circle.latitude, lng: circle.longitude}); });\n  }\n\n  setEditable(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => { return c.setEditable(circle.editable); });\n  }\n\n  setDraggable(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => { return c.setDraggable(circle.draggable); });\n  }\n\n  setVisible(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => { return c.setVisible(circle.visible); });\n  }\n\n  setRadius(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => { return c.setRadius(circle.radius); });\n  }\n\n  createEventObservable<T>(eventName: string, circle: AgmCircle): Observable<T> {\n    return Observable.create((observer: Observer<T>) => {\n      let listener: mapTypes.MapsEventListener = null;\n      this._circles.get(circle).then((c) => {\n        listener = c.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n\n      return () => {\n        if (listener !== null) {\n          listener.remove();\n        }\n      };\n    });\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {AgmMarker} from './../../directives/marker';\n\nimport {GoogleMapsAPIWrapper} from './../google-maps-api-wrapper';\nimport {Marker} from './../google-maps-types';\n\ndeclare var google: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MarkerManager {\n  protected _markers: Map<AgmMarker, Promise<Marker>> =\n      new Map<AgmMarker, Promise<Marker>>();\n\n  constructor(protected _mapsWrapper: GoogleMapsAPIWrapper, protected _zone: NgZone) {}\n\n  deleteMarker(marker: AgmMarker): Promise<void> {\n    const m = this._markers.get(marker);\n    if (m == null) {\n      // marker already deleted\n      return Promise.resolve();\n    }\n    return m.then((m: Marker) => {\n      return this._zone.run(() => {\n        m.setMap(null);\n        this._markers.delete(marker);\n      });\n    });\n  }\n\n  updateMarkerPosition(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then(\n        (m: Marker) => m.setPosition({lat: marker.latitude, lng: marker.longitude}));\n  }\n\n  updateTitle(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setTitle(marker.title));\n  }\n\n  updateLabel(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => { m.setLabel(marker.label); });\n  }\n\n  updateDraggable(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setDraggable(marker.draggable));\n  }\n\n  updateIcon(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setIcon(marker.iconUrl));\n  }\n\n  updateOpacity(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setOpacity(marker.opacity));\n  }\n\n  updateVisible(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setVisible(marker.visible));\n  }\n\n  updateZIndex(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setZIndex(marker.zIndex));\n  }\n\n  updateClickable(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setClickable(marker.clickable));\n  }\n\n  updateAnimation(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => {\n      if (typeof marker.animation === 'string') {\n        m.setAnimation(google.maps.Animation[marker.animation]);\n      } else {\n        m.setAnimation(marker.animation);\n      }\n    });\n  }\n\n  addMarker(marker: AgmMarker) {\n    const markerPromise = this._mapsWrapper.createMarker({\n      position: {lat: marker.latitude, lng: marker.longitude},\n      label: marker.label,\n      draggable: marker.draggable,\n      icon: marker.iconUrl,\n      opacity: marker.opacity,\n      visible: marker.visible,\n      zIndex: marker.zIndex,\n      title: marker.title,\n      clickable: marker.clickable,\n      animation: (typeof marker.animation === 'string') ? google.maps.Animation[marker.animation] : marker.animation\n    });\n\n    this._markers.set(marker, markerPromise);\n  }\n\n  getNativeMarker(marker: AgmMarker): Promise<Marker> {\n    return this._markers.get(marker);\n  }\n\n  createEventObservable<T>(eventName: string, marker: AgmMarker): Observable<T> {\n    return Observable.create((observer: Observer<T>) => {\n      this._markers.get(marker).then((m: Marker) => {\n        m.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n}\n","import { Observable ,  Observer } from 'rxjs';\nimport {Injectable, NgZone} from '@angular/core';\n\nimport {AgmInfoWindow} from '../../directives/info-window';\n\nimport {GoogleMapsAPIWrapper} from '../google-maps-api-wrapper';\nimport {InfoWindow, InfoWindowOptions} from '../google-maps-types';\nimport {MarkerManager} from './marker-manager';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InfoWindowManager {\n  private _infoWindows: Map<AgmInfoWindow, Promise<InfoWindow>> =\n      new Map<AgmInfoWindow, Promise<InfoWindow>>();\n\n  constructor(\n      private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone,\n      private _markerManager: MarkerManager) {}\n\n  deleteInfoWindow(infoWindow: AgmInfoWindow): Promise<void> {\n    const iWindow = this._infoWindows.get(infoWindow);\n    if (iWindow == null) {\n      // info window already deleted\n      return Promise.resolve();\n    }\n    return iWindow.then((i: InfoWindow) => {\n      return this._zone.run(() => {\n        i.close();\n        this._infoWindows.delete(infoWindow);\n      });\n    });\n  }\n\n  setPosition(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow).then((i: InfoWindow) => i.setPosition({\n      lat: infoWindow.latitude,\n      lng: infoWindow.longitude\n    }));\n  }\n\n  setZIndex(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow)\n        .then((i: InfoWindow) => i.setZIndex(infoWindow.zIndex));\n  }\n\n  open(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow).then((w) => {\n      if (infoWindow.hostMarker != null) {\n        return this._markerManager.getNativeMarker(infoWindow.hostMarker).then((marker) => {\n          return this._mapsWrapper.getNativeMap().then((map) => w.open(map, marker));\n        });\n      }\n      return this._mapsWrapper.getNativeMap().then((map) => w.open(map));\n    });\n  }\n\n  close(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow).then((w) => w.close());\n  }\n\n  setOptions(infoWindow: AgmInfoWindow, options: InfoWindowOptions) {\n    return this._infoWindows.get(infoWindow).then((i: InfoWindow) => i.setOptions(options));\n  }\n\n  addInfoWindow(infoWindow: AgmInfoWindow) {\n    const options: InfoWindowOptions = {\n      content: infoWindow.content,\n      maxWidth: infoWindow.maxWidth,\n      zIndex: infoWindow.zIndex,\n      disableAutoPan: infoWindow.disableAutoPan\n    };\n    if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n      options.position = {lat: infoWindow.latitude, lng: infoWindow.longitude};\n    }\n    const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n    this._infoWindows.set(infoWindow, infoWindowPromise);\n  }\n\n   /**\n    * Creates a Google Maps event listener for the given InfoWindow as an Observable\n    */\n  createEventObservable<T>(eventName: string, infoWindow: AgmInfoWindow): Observable<T> {\n    return Observable.create((observer: Observer<T>) => {\n      this._infoWindows.get(infoWindow).then((i: InfoWindow) => {\n        i.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {AgmPolygon} from '../../directives/polygon';\nimport {GoogleMapsAPIWrapper} from '../google-maps-api-wrapper';\nimport {Polygon} from '../google-maps-types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PolygonManager {\n  private _polygons: Map<AgmPolygon, Promise<Polygon>> =\n      new Map<AgmPolygon, Promise<Polygon>>();\n\n  constructor(private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  addPolygon(path: AgmPolygon) {\n    const polygonPromise = this._mapsWrapper.createPolygon({\n      clickable: path.clickable,\n      draggable: path.draggable,\n      editable: path.editable,\n      fillColor: path.fillColor,\n      fillOpacity: path.fillOpacity,\n      geodesic: path.geodesic,\n      paths: path.paths,\n      strokeColor: path.strokeColor,\n      strokeOpacity: path.strokeOpacity,\n      strokeWeight: path.strokeWeight,\n      visible: path.visible,\n      zIndex: path.zIndex,\n    });\n    this._polygons.set(path, polygonPromise);\n  }\n\n  updatePolygon(polygon: AgmPolygon): Promise<void> {\n    const m = this._polygons.get(polygon);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: Polygon) => this._zone.run(() => { l.setPaths(polygon.paths); }));\n  }\n\n  setPolygonOptions(path: AgmPolygon, options: {[propName: string]: any}): Promise<void> {\n    return this._polygons.get(path).then((l: Polygon) => { l.setOptions(options); });\n  }\n\n  deletePolygon(paths: AgmPolygon): Promise<void> {\n    const m = this._polygons.get(paths);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: Polygon) => {\n      return this._zone.run(() => {\n        l.setMap(null);\n        this._polygons.delete(paths);\n      });\n    });\n  }\n\n  createEventObservable<T>(eventName: string, path: AgmPolygon): Observable<T> {\n    return Observable.create((observer: Observer<T>) => {\n      this._polygons.get(path).then((l: Polygon) => {\n        l.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {AgmPolyline} from '../../directives/polyline';\nimport {AgmPolylinePoint} from '../../directives/polyline-point';\nimport {GoogleMapsAPIWrapper} from '../google-maps-api-wrapper';\nimport {LatLngLiteral, Polyline, LatLng} from '../google-maps-types';\ndeclare var google: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PolylineManager {\n  private _polylines: Map<AgmPolyline, Promise<Polyline>> =\n      new Map<AgmPolyline, Promise<Polyline>>();\n\n  constructor(private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  private static _convertPoints(line: AgmPolyline): Array<LatLngLiteral> {\n    const path = line._getPoints().map((point: AgmPolylinePoint) => {\n      return <LatLngLiteral>{lat: point.latitude, lng: point.longitude};\n    });\n    return path;\n  }\n\n  addPolyline(line: AgmPolyline) {\n    const path = PolylineManager._convertPoints(line);\n    const polylinePromise = this._mapsWrapper.createPolyline({\n      clickable: line.clickable,\n      draggable: line.draggable,\n      editable: line.editable,\n      geodesic: line.geodesic,\n      strokeColor: line.strokeColor,\n      strokeOpacity: line.strokeOpacity,\n      strokeWeight: line.strokeWeight,\n      visible: line.visible,\n      zIndex: line.zIndex,\n      path: path\n    });\n    this._polylines.set(line, polylinePromise);\n  }\n\n  updatePolylinePoints(line: AgmPolyline): Promise<void> {\n    const path = PolylineManager._convertPoints(line);\n    const m = this._polylines.get(line);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: Polyline) => { return this._zone.run(() => { l.setPath(path); }); });\n  }\n\n  setPolylineOptions(line: AgmPolyline, options: {[propName: string]: any}):\n      Promise<void> {\n    return this._polylines.get(line).then((l: Polyline) => { l.setOptions(options); });\n  }\n\n  deletePolyline(line: AgmPolyline): Promise<void> {\n    const m = this._polylines.get(line);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: Polyline) => {\n      return this._zone.run(() => {\n        l.setMap(null);\n        this._polylines.delete(line);\n      });\n    });\n  }\n\n  createEventObservable<T>(eventName: string, line: AgmPolyline): Observable<T> {\n    return Observable.create((observer: Observer<T>) => {\n      this._polylines.get(line).then((l: Polyline) => {\n        l.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  createEventObservableOnPath<T>(eventName: string, line: AgmPolyline): Observable<T> {\n    return Observable.create((observer: Observer<any>) => {\n      this._polylines.get(line).then((l: Polyline) => {\n        this._mapsWrapper.getNativeMap().then(map => {\n            google.maps.event.addListener(l.getPath(), 'set_at', (e: number) => {\n                return this._zone.run(() => observer.next({index: e, value: l.getPath().getAt(e)}));\n            });\n        });\n      });\n    });\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {AgmKmlLayer} from './../../directives/kml-layer';\nimport {GoogleMapsAPIWrapper} from './../google-maps-api-wrapper';\nimport {KmlLayer, KmlLayerOptions} from './../google-maps-types';\n\ndeclare var google: any;\n\n/**\n * Manages all KML Layers for a Google Map instance.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class KmlLayerManager {\n  private _layers: Map<AgmKmlLayer, Promise<KmlLayer>> =\n      new Map<AgmKmlLayer, Promise<KmlLayer>>();\n\n  constructor(private _wrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  /**\n   * Adds a new KML Layer to the map.\n   */\n  addKmlLayer(layer: AgmKmlLayer) {\n    const newLayer = this._wrapper.getNativeMap().then(m => {\n      return new google.maps.KmlLayer(<KmlLayerOptions>{\n        clickable: layer.clickable,\n        map: m,\n        preserveViewport: layer.preserveViewport,\n        screenOverlays: layer.screenOverlays,\n        suppressInfoWindows: layer.suppressInfoWindows,\n        url: layer.url,\n        zIndex: layer.zIndex\n      });\n    });\n    this._layers.set(layer, newLayer);\n  }\n\n  setOptions(layer: AgmKmlLayer, options: KmlLayerOptions) {\n    this._layers.get(layer).then(l => l.setOptions(options));\n  }\n\n  deleteKmlLayer(layer: AgmKmlLayer) {\n    this._layers.get(layer).then(l => {\n      l.setMap(null);\n      this._layers.delete(layer);\n    });\n  }\n\n  /**\n   * Creates a Google Maps event listener for the given KmlLayer as an Observable\n   */\n  createEventObservable<T>(eventName: string, layer: AgmKmlLayer): Observable<T> {\n    return Observable.create((observer: Observer<T>) => {\n      this._layers.get(layer).then((m: KmlLayer) => {\n        m.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { AgmDataLayer } from './../../directives/data-layer';\nimport { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';\nimport { Data, DataOptions, Feature } from './../google-maps-types';\n\ndeclare var google: any;\n\n/**\n * Manages all Data Layers for a Google Map instance.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataLayerManager {\n  private _layers: Map<AgmDataLayer, Promise<Data>> =\n  new Map<AgmDataLayer, Promise<Data>>();\n\n  constructor(private _wrapper: GoogleMapsAPIWrapper, private _zone: NgZone) { }\n\n  /**\n   * Adds a new Data Layer to the map.\n   */\n  addDataLayer(layer: AgmDataLayer) {\n    const newLayer = this._wrapper.createDataLayer(<DataOptions>{\n      style: layer.style\n    })\n    .then(d => {\n      if (layer.geoJson) {\n        this.getDataFeatures(d, layer.geoJson).then(features => d.features = features);\n      }\n      return d;\n    });\n    this._layers.set(layer, newLayer);\n  }\n\n  deleteDataLayer(layer: AgmDataLayer) {\n    this._layers.get(layer).then(l => {\n      l.setMap(null);\n      this._layers.delete(layer);\n    });\n  }\n\n  updateGeoJson(layer: AgmDataLayer, geoJson: Object | string) {\n    this._layers.get(layer).then(l => {\n      l.forEach(function (feature: Feature) {\n        l.remove(feature);\n\n        var index = l.features.indexOf(feature, 0);\n        if (index > -1) {\n          l.features.splice(index, 1);\n        }\n      });\n      this.getDataFeatures(l, geoJson).then(features => l.features = features);\n    });\n  }\n\n  setDataOptions(layer: AgmDataLayer, options: DataOptions)\n  {\n    this._layers.get(layer).then(l => {\n      l.setControlPosition(options.controlPosition);\n      l.setControls(options.controls);\n      l.setDrawingMode(options.drawingMode);\n      l.setStyle(options.style);\n    });\n  }\n\n  /**\n   * Creates a Google Maps event listener for the given DataLayer as an Observable\n   */\n  createEventObservable<T>(eventName: string, layer: AgmDataLayer): Observable<T> {\n    return Observable.create((observer: Observer<T>) => {\n      this._layers.get(layer).then((d: Data) => {\n        d.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  /**\n   * Extract features from a geoJson using google.maps Data Class\n   * @param d : google.maps.Data class instance\n   * @param geoJson : url or geojson object\n   */\n  getDataFeatures(d: Data, geoJson: Object | string): Promise<Feature[]> {\n    return new Promise<Feature[]>((resolve, reject) => {\n        if (typeof geoJson === 'object') {\n          try {\n            const features = d.addGeoJson(geoJson);\n            resolve(features);\n          } catch (e) {\n            reject(e);\n          }\n        } else if (typeof geoJson === 'string') {\n          d.loadGeoJson(geoJson, null, resolve);\n        } else {\n          reject(`Impossible to extract features from geoJson: wrong argument type`);\n        }\n      });\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\n\nimport {Observable, Observer} from 'rxjs';\n\nimport {GoogleMapsAPIWrapper} from '../google-maps-api-wrapper';\nimport {AgmSearchBox} from '../../directives/search-box';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SearchBoxManager {\n\n  constructor(private _apiWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  /** @internal */\n  createEventObservable<T>(searchBox: AgmSearchBox): Observable<T> {\n    return Observable.create((observer: Observer<T>) => {\n      searchBox.getSearchBoxEl().addListener('places_changed', (e: T) => {\n        this._zone.run(() => observer.next(e));\n      });\n    });\n  }\n}\n","import { Component, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, Input, Output } from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {MouseEvent} from '../map-types';\nimport {GoogleMapsAPIWrapper} from '../services/google-maps-api-wrapper';\nimport {\n  FullscreenControlOptions, LatLng, LatLngLiteral, MapTypeControlOptions, MapTypeId, PanControlOptions,\n  RotateControlOptions, ScaleControlOptions, StreetViewControlOptions, ZoomControlOptions} from '../services/google-maps-types';\nimport {LatLngBounds, LatLngBoundsLiteral, MapTypeStyle} from '../services/google-maps-types';\nimport {CircleManager} from '../services/managers/circle-manager';\nimport {InfoWindowManager} from '../services/managers/info-window-manager';\nimport {MarkerManager} from '../services/managers/marker-manager';\nimport {PolygonManager} from '../services/managers/polygon-manager';\nimport {PolylineManager} from '../services/managers/polyline-manager';\nimport {KmlLayerManager} from '../services/managers/kml-layer-manager';\nimport {DataLayerManager} from '../services/managers/data-layer-manager';\nimport {SearchBoxManager} from '../services/managers/search-box-manager';\n\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Component({\n  selector: 'agm-map',\n  providers: [\n    GoogleMapsAPIWrapper, MarkerManager, InfoWindowManager, CircleManager, PolylineManager,\n    PolygonManager, KmlLayerManager, DataLayerManager, SearchBoxManager\n  ],\n  // host: {\n  //   // todo: deprecated - we will remove it with the next version\n  //   '[class.sebm-google-map-container]': 'true'\n  // },\n  styles: [`\n    .agm-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .agm-map-content {\n      display:none;\n    }\n  `],\n  template: `\n    <div class='agm-map-container-inner'></div>\n    <div class='agm-map-content'>\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class AgmMap implements OnChanges, OnInit, OnDestroy {\n  /**\n   * Map option attributes that can change over time\n   */\n  private static _mapOptionsAttributes: string[] = [\n    'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',\n    'keyboardShortcuts', 'zoomControl', 'zoomControlOptions', 'styles', 'streetViewControl',\n    'streetViewControlOptions', 'zoom', 'mapTypeControl', 'mapTypeControlOptions', 'minZoom',\n    'maxZoom', 'panControl', 'panControlOptions', 'rotateControl', 'rotateControlOptions',\n    'fullscreenControl', 'fullscreenControlOptions', 'scaleControl', 'scaleControlOptions',\n    'mapTypeId', 'clickableIcons', 'gestureHandling'\n  ];\n  /**\n   * The longitude that defines the center of the map.\n   */\n  @Input() longitude: number = 0;\n  /**\n   * The latitude that defines the center of the map.\n   */\n  @Input() latitude: number = 0;\n  /**\n   * The zoom level of the map. The default zoom level is 8.\n   */\n  @Input() zoom: number = 8;\n  /**\n   * The minimal zoom level of the map allowed. When not provided, no restrictions to the zoom level\n   * are enforced.\n   */\n  @Input() minZoom: number;\n  /**\n   * The maximal zoom level of the map allowed. When not provided, no restrictions to the zoom level\n   * are enforced.\n   */\n  @Input() maxZoom: number;\n  /**\n   * Enables/disables if map is draggable.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('mapDraggable') draggable: boolean = true;\n  /**\n   * Enables/disables zoom and center on double click. Enabled by default.\n   */\n  @Input() disableDoubleClickZoom: boolean = false;\n  /**\n   * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n   * value cannot get updated.\n   */\n  @Input() disableDefaultUI: boolean = false;\n  /**\n   * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n   */\n  @Input() scrollwheel: boolean = true;\n  /**\n   * Color used for the background of the Map div. This color will be visible when tiles have not\n   * yet loaded as the user pans. This option can only be set when the map is initialized.\n   */\n  @Input() backgroundColor: string;\n  /**\n   * The name or url of the cursor to display when mousing over a draggable map. This property uses\n   * the css  * cursor attribute to change the icon. As with the css property, you must specify at\n   * least one fallback cursor that is not a URL. For example:\n   * [draggableCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\n   */\n  @Input() draggableCursor: string;\n  /**\n   * The name or url of the cursor to display when the map is being dragged. This property uses the\n   * css cursor attribute to change the icon. As with the css property, you must specify at least\n   * one fallback cursor that is not a URL. For example:\n   * [draggingCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\n   */\n  @Input() draggingCursor: string;\n  /**\n   * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n   * enabled by default.\n   */\n  @Input() keyboardShortcuts: boolean = true;\n  /**\n   * The enabled/disabled state of the Zoom control.\n   */\n  @Input() zoomControl: boolean = true;\n  /**\n   * Options for the Zoom control.\n   */\n  @Input() zoomControlOptions: ZoomControlOptions;\n  /**\n   * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n   * modes, these styles will only apply to labels and geometry.\n   */\n  @Input() styles: MapTypeStyle[] = [];\n  /**\n   * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n   * used to\n   * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n   */\n  @Input() usePanning: boolean = false;\n  /**\n   * The initial enabled/disabled state of the Street View Pegman control.\n   * This control is part of the default UI, and should be set to false when displaying a map type\n   * on which the Street View road overlay should not appear (e.g. a non-Earth map type).\n   */\n  @Input() streetViewControl: boolean = true;\n  /**\n   * Options for the Street View control.\n   */\n  @Input() streetViewControlOptions: StreetViewControlOptions;\n  /**\n   * Sets the viewport to contain the given bounds.\n   */\n  @Input() fitBounds: LatLngBoundsLiteral|LatLngBounds = null;\n  /**\n   * The initial enabled/disabled state of the Scale control. This is disabled by default.\n   */\n  @Input() scaleControl: boolean = false;\n  /**\n   * Options for the scale control.\n   */\n  @Input() scaleControlOptions: ScaleControlOptions;\n  /**\n   * The initial enabled/disabled state of the Map type control.\n   */\n  @Input() mapTypeControl: boolean = false;\n  /**\n   * Options for the Map type control.\n   */\n  @Input() mapTypeControlOptions: MapTypeControlOptions;\n  /**\n   * The initial enabled/disabled state of the Pan control.\n   */\n  @Input() panControl: boolean  = false;\n  /**\n   * Options for the Pan control.\n   */\n  @Input() panControlOptions: PanControlOptions;\n  /**\n   * The initial enabled/disabled state of the Rotate control.\n   */\n  @Input() rotateControl: boolean = false;\n  /**\n   * Options for the Rotate control.\n   */\n  @Input() rotateControlOptions: RotateControlOptions;\n  /**\n   * The initial enabled/disabled state of the Fullscreen control.\n   */\n  @Input() fullscreenControl: boolean  = false;\n  /**\n   * Options for the Fullscreen control.\n   */\n  @Input() fullscreenControlOptions: FullscreenControlOptions;\n  /**\n   * The map mapTypeId. Defaults to 'roadmap'.\n   */\n  @Input() mapTypeId: 'roadmap'|'hybrid'|'satellite'|'terrain'|string = 'roadmap';\n  /**\n   * When false, map icons are not clickable. A map icon represents a point of interest,\n   * also known as a POI. By default map icons are clickable.\n   */\n  @Input() clickableIcons: boolean = true;\n  /**\n   * This setting controls how gestures on the map are handled.\n   * Allowed values:\n   * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n   * - 'greedy'      (All touch gestures pan or zoom the map.)\n   * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n   * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n   */\n  @Input() gestureHandling: 'cooperative'|'greedy'|'none'|'auto' = 'auto';\n  /**\n   * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n   * marker or infoWindow).\n   */\n  @Output() mapClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n   * on a marker or infoWindow).\n   */\n  @Output() mapRightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n   * on a marker or infoWindow).\n   */\n  @Output() mapDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event emitter is fired when the map center changes.\n   */\n  @Output() centerChange: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\n  /**\n   * This event is fired when the viewport bounds have changed.\n   */\n  @Output() boundsChange: EventEmitter<LatLngBounds> = new EventEmitter<LatLngBounds>();\n  /**\n   * This event is fired when the mapTypeId property changes.\n   */\n  @Output() mapTypeIdChange: EventEmitter<MapTypeId> = new EventEmitter<MapTypeId>();\n  /**\n   * This event is fired when the map becomes idle after panning or zooming.\n   */\n  @Output() idle: EventEmitter<void> = new EventEmitter<void>();\n  /**\n   * This event is fired when the zoom level has changed.\n   */\n  @Output() zoomChange: EventEmitter<number> = new EventEmitter<number>();\n  /**\n   * This event is fired when the google map is fully initialized.\n   * You get the google.maps.Map instance as a result of this EventEmitter.\n   */\n  @Output() mapReady: EventEmitter<any> = new EventEmitter<any>();\n  private _observableSubscriptions: Subscription[] = [];\n\n  constructor(private _elem: ElementRef, private _mapsWrapper: GoogleMapsAPIWrapper) {}\n\n  /** @internal */\n  ngOnInit() {\n    // todo: this should be solved with a new component and a viewChild decorator\n    const container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n    this._initMapInstance(container);\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    // unsubscribe all registered observable subscriptions\n    this._observableSubscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  /* @internal */\n  ngOnChanges(changes: SimpleChanges) {\n    this._updateMapOptionsChanges(changes);\n    this._updatePosition(changes);\n  }\n\n  /**\n   * Triggers a resize event on the google map instance.\n   * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n   * Returns a promise that gets resolved after the event was triggered.\n   */\n  triggerResize(recenter: boolean = true): Promise<void> {\n    // Note: When we would trigger the resize event and show the map in the same turn (which is a\n    // common case for triggering a resize event), then the resize event would not\n    // work (to show the map), so we trigger the event in a timeout.\n    return new Promise<void>((resolve) => {\n      setTimeout(() => {\n        return this._mapsWrapper.triggerMapEvent('resize').then(() => {\n          if (recenter) {\n            this.fitBounds != null ? this._fitBounds() : this._setCenter();\n          }\n          resolve();\n        });\n      });\n    });\n  }\n\n  private _initMapInstance(el: HTMLElement) {\n    this._mapsWrapper.createMap(el, {\n      center: {lat: this.latitude || 0, lng: this.longitude || 0},\n      zoom: this.zoom,\n      minZoom: this.minZoom,\n      maxZoom: this.maxZoom,\n      disableDefaultUI: this.disableDefaultUI,\n      disableDoubleClickZoom: this.disableDoubleClickZoom,\n      scrollwheel: this.scrollwheel,\n      backgroundColor: this.backgroundColor,\n      draggable: this.draggable,\n      draggableCursor: this.draggableCursor,\n      draggingCursor: this.draggingCursor,\n      keyboardShortcuts: this.keyboardShortcuts,\n      styles: this.styles,\n      zoomControl: this.zoomControl,\n      zoomControlOptions: this.zoomControlOptions,\n      streetViewControl: this.streetViewControl,\n      streetViewControlOptions: this.streetViewControlOptions,\n      scaleControl: this.scaleControl,\n      scaleControlOptions: this.scaleControlOptions,\n      mapTypeControl: this.mapTypeControl,\n      mapTypeControlOptions: this.mapTypeControlOptions,\n      panControl: this.panControl,\n      panControlOptions: this.panControlOptions,\n      rotateControl: this.rotateControl,\n      rotateControlOptions: this.rotateControlOptions,\n      fullscreenControl: this.fullscreenControl,\n      fullscreenControlOptions: this.fullscreenControlOptions,\n      mapTypeId: this.mapTypeId,\n      clickableIcons: this.clickableIcons,\n      gestureHandling: this.gestureHandling\n    })\n      // .then(() => this._mapsWrapper.getNativeMap())\n      .then(() => this._mapsWrapper.getTrueNativeMap())\n      .then(map => this.mapReady.emit(map));\n\n    // register event listeners\n    this._handleMapCenterChange();\n    this._handleMapZoomChange();\n    this._handleMapMouseEvents();\n    this._handleBoundsChange();\n    this._handleMapTypeIdChange();\n    this._handleIdleEvent();\n  }\n\n  private _updateMapOptionsChanges(changes: SimpleChanges) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys =\n        Object.keys(changes).filter(k => AgmMap._mapOptionsAttributes.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    this._mapsWrapper.setMapOptions(options);\n  }\n\n  private _updatePosition(changes: SimpleChanges) {\n    if (changes['latitude'] == null && changes['longitude'] == null &&\n        changes['fitBounds'] == null) {\n      // no position update needed\n      return;\n    }\n\n    // we prefer fitBounds in changes\n    if (changes['fitBounds'] && this.fitBounds != null) {\n      this._fitBounds();\n      return;\n    }\n\n    if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n      return;\n    }\n    this._setCenter();\n  }\n\n  private _setCenter() {\n    let newCenter = {\n      lat: this.latitude,\n      lng: this.longitude,\n    };\n    if (this.usePanning) {\n      this._mapsWrapper.panTo(newCenter);\n    } else {\n      this._mapsWrapper.setCenter(newCenter);\n    }\n  }\n\n  private _fitBounds() {\n    if (this.usePanning) {\n      this._mapsWrapper.panToBounds(this.fitBounds);\n      return;\n    }\n    this._mapsWrapper.fitBounds(this.fitBounds);\n  }\n\n  private _handleMapCenterChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('center_changed').subscribe(() => {\n      this._mapsWrapper.getCenter().then((center: LatLng) => {\n        this.latitude = center.lat();\n        this.longitude = center.lng();\n        this.centerChange.emit(<LatLngLiteral>{lat: this.latitude, lng: this.longitude});\n      });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleBoundsChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('bounds_changed').subscribe(() => {\n      this._mapsWrapper.getBounds().then(\n          (bounds: LatLngBounds) => { this.boundsChange.emit(bounds); });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapTypeIdChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('maptypeid_changed').subscribe(() => {\n      this._mapsWrapper.getMapTypeId().then(\n          (mapTypeId: MapTypeId) => { this.mapTypeIdChange.emit(mapTypeId); });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapZoomChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('zoom_changed').subscribe(() => {\n      this._mapsWrapper.getZoom().then((z: number) => {\n        this.zoom = z;\n        this.zoomChange.emit(z);\n      });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleIdleEvent() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('idle').subscribe(\n        () => { this.idle.emit(void 0); });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapMouseEvents() {\n    interface Emitter {\n      emit(value: any): void;\n    }\n    type Event = {name: string, emitter: Emitter};\n\n    const events: Event[] = [\n      {name: 'click', emitter: this.mapClick},\n      {name: 'rightclick', emitter: this.mapRightClick},\n      {name: 'dblclick', emitter: this.mapDblClick},\n    ];\n\n    events.forEach((e: Event) => {\n      const s = this._mapsWrapper.subscribeToMapEvent<{latLng: LatLng}>(e.name).subscribe(\n          (event: {latLng: LatLng}) => {\n            const value = <MouseEvent>{coords: {lat: event.latLng.lat(), lng: event.latLng.lng()}};\n            e.emitter.emit(value);\n          });\n      this._observableSubscriptions.push(s);\n    });\n  }\n}\n","import {Directive, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange, Input, Output} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {MouseEvent} from '../map-types';\nimport {LatLng, LatLngBounds, LatLngLiteral} from '../services/google-maps-types';\nimport {MouseEvent as MapMouseEvent} from '../services/google-maps-types';\nimport {CircleManager} from '../services/managers/circle-manager';\n\n@Directive({\n  selector: 'agm-circle'\n})\nexport class AgmCircle implements OnInit, OnChanges, OnDestroy {\n  private static _mapOptions: string[] = [\n    'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\n    'visible', 'zIndex', 'clickable'\n  ];\n  /**\n   * The latitude position of the circle (required).\n   */\n  @Input() latitude: number;\n  /**\n   * The clickable position of the circle (required).\n   */\n  @Input() longitude: number;\n  /**\n   * Indicates whether this Circle handles mouse events. Defaults to true.\n   */\n  @Input() clickable: boolean = true;\n  /**\n   * If set to true, the user can drag this circle over the map. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('circleDraggable') draggable: boolean = false;\n  /**\n   * If set to true, the user can edit this circle by dragging the control points shown at\n   * the center and around the circumference of the circle. Defaults to false.\n   */\n  @Input() editable: boolean = false;\n  /**\n   * The fill color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() fillColor: string;\n  /**\n   * The fill opacity between 0.0 and 1.0.\n   */\n  @Input() fillOpacity: number;\n  /**\n   * The radius in meters on the Earth's surface.\n   */\n  @Input() radius: number = 0;\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() strokeColor: string;\n  /**\n   * The stroke opacity between 0.0 and 1.0\n   */\n  @Input() strokeOpacity: number;\n  /**\n   * The stroke position. Defaults to CENTER.\n   * This property is not supported on Internet Explorer 8 and earlier.\n   */\n  @Input() strokePosition: 'CENTER'|'INSIDE'|'OUTSIDE' = 'CENTER';\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight: number = 0;\n  /**\n   * Whether this circle is visible on the map. Defaults to true.\n   */\n  @Input() visible: boolean = true;\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n  /**\n   * This event is fired when the circle's center is changed.\n   */\n  @Output() centerChange: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\n  /**\n   * This event emitter gets emitted when the user clicks on the circle.\n   */\n  @Output() circleClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event emitter gets emitted when the user clicks on the circle.\n   */\n  @Output() circleDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is repeatedly fired while the user drags the circle.\n   */\n  @Output() drag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired when the user stops dragging the circle.\n   */\n  @Output() dragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired when the user starts dragging the circle.\n   */\n  @Output() dragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired when the DOM mousedown event is fired on the circle.\n   */\n  @Output() mouseDown: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired when the DOM mousemove event is fired on the circle.\n   */\n  @Output() mouseMove: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired on circle mouseout.\n   */\n  @Output() mouseOut: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired on circle mouseover.\n   */\n  @Output() mouseOver: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired when the DOM mouseup event is fired on the circle.\n   */\n  @Output() mouseUp: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired when the circle's radius is changed.\n   */\n  @Output() radiusChange: EventEmitter<number> = new EventEmitter<number>();\n  /**\n   * This event is fired when the circle is right-clicked on.\n   */\n  @Output() rightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  private _circleAddedToManager: boolean = false;\n  private _eventSubscriptions: Subscription[] = [];\n\n  constructor(private _manager: CircleManager) {}\n\n  /** @internal */\n  ngOnInit() {\n    this._manager.addCircle(this);\n    this._circleAddedToManager = true;\n    this._registerEventListeners();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    if (!this._circleAddedToManager) {\n      return;\n    }\n    if (changes['latitude'] || changes['longitude']) {\n      this._manager.setCenter(this);\n    }\n    if (changes['editable']) {\n      this._manager.setEditable(this);\n    }\n    if (changes['draggable']) {\n      this._manager.setDraggable(this);\n    }\n    if (changes['visible']) {\n      this._manager.setVisible(this);\n    }\n    if (changes['radius']) {\n      this._manager.setRadius(this);\n    }\n    this._updateCircleOptionsChanges(changes);\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._eventSubscriptions.forEach(function(s: Subscription) { s.unsubscribe(); });\n    this._eventSubscriptions = null;\n    this._manager.removeCircle(this);\n  }\n\n  /**\n   * Gets the LatLngBounds of this Circle.\n   */\n  getBounds(): Promise<LatLngBounds> { return this._manager.getBounds(this); }\n\n  getCenter(): Promise<LatLng> { return this._manager.getCenter(this); }\n\n  private _updateCircleOptionsChanges(changes: {[propName: string]: SimpleChange}) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys =\n        Object.keys(changes).filter(k => AgmCircle._mapOptions.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    if (optionKeys.length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  private _registerEventListeners() {\n    let events: Map<string, EventEmitter<any>> = new Map<string, EventEmitter<any>>();\n    events.set('center_changed', this.centerChange);\n    events.set('click', this.circleClick);\n    events.set('dblclick', this.circleDblClick);\n    events.set('drag', this.drag);\n    events.set('dragend', this.dragEnd);\n    events.set('dragStart', this.dragStart);\n    events.set('mousedown', this.mouseDown);\n    events.set('mousemove', this.mouseMove);\n    events.set('mouseout', this.mouseOut);\n    events.set('mouseover', this.mouseOver);\n    events.set('mouseup', this.mouseUp);\n    events.set('radius_changed', this.radiusChange);\n    events.set('rightclick', this.rightClick);\n\n    events.forEach((eventEmitter, eventName) => {\n      this._eventSubscriptions.push(\n          this._manager.createEventObservable<MapMouseEvent>(eventName, this).subscribe((value) => {\n            switch (eventName) {\n              case 'radius_changed':\n                this._manager.getRadius(this).then((radius) => eventEmitter.emit(radius));\n                break;\n              case 'center_changed':\n                this._manager.getCenter(this).then(\n                    (center) =>\n                        eventEmitter.emit(<LatLngLiteral>{lat: center.lat(), lng: center.lng()}));\n                break;\n              default:\n                eventEmitter.emit(\n                    <MouseEvent>{coords: {lat: value.latLng.lat(), lng: value.latLng.lng()}});\n            }\n          }));\n    });\n  }\n}\n","import { Component, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange, Output, Input } from '@angular/core';\n\nimport {InfoWindowManager} from '../services/managers/info-window-manager';\n\nimport {AgmMarker} from './marker';\n\nlet infoWindowId = 0;\n\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Component({\n  selector: 'agm-info-window',\n  template: `<div class='agm-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class AgmInfoWindow implements OnDestroy, OnChanges, OnInit {\n  private static _infoWindowOptionsInputs: string[] = ['disableAutoPan', 'maxWidth'];\n  /**\n   * The latitude position of the info window (only usefull if you use it ouside of a {@link\n   * AgmMarker}).\n   */\n  @Input() latitude: number;\n  /**\n   * The longitude position of the info window (only usefull if you use it ouside of a {@link\n   * AgmMarker}).\n   */\n  @Input() longitude: number;\n  /**\n   * Disable auto-pan on open. By default, the info window will pan the map so that it is fully\n   * visible when it opens.\n   */\n  @Input() disableAutoPan: boolean;\n  /**\n   * All InfoWindows are displayed on the map in order of their zIndex, with higher values\n   * displaying in front of InfoWindows with lower values. By default, InfoWindows are displayed\n   * according to their latitude, with InfoWindows of lower latitudes appearing in front of\n   * InfoWindows at higher latitudes. InfoWindows are always displayed in front of markers.\n   */\n  @Input() zIndex: number;\n  /**\n   * Maximum width of the infowindow, regardless of content's width. This value is only considered\n   * if it is set before a call to open. To change the maximum width when changing content, call\n   * close, update maxWidth, and then open.\n   */\n  @Input() maxWidth: number;\n  /**\n   * Holds the marker that is the host of the info window (if available)\n   */\n  hostMarker: AgmMarker;\n  /**\n   * Holds the native element that is used for the info window content.\n   */\n  content: Node;\n  /**\n   * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n   */\n  @Input() isOpen: boolean = false;\n  /**\n   * Emits an event when the info window is closed.\n   */\n  @Output() infoWindowClose: EventEmitter<void> = new EventEmitter<void>();\n  private _infoWindowAddedToManager: boolean = false;\n  private _id: string = (infoWindowId++).toString();\n\n  constructor(private _infoWindowManager: InfoWindowManager, private _el: ElementRef) {}\n\n  ngOnInit() {\n    this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n    this._infoWindowManager.addInfoWindow(this);\n    this._infoWindowAddedToManager = true;\n    this._updateOpenState();\n    this._registerEventListeners();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    if (!this._infoWindowAddedToManager) {\n      return;\n    }\n    if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\n        typeof this.longitude === 'number') {\n      this._infoWindowManager.setPosition(this);\n    }\n    if (changes['zIndex']) {\n      this._infoWindowManager.setZIndex(this);\n    }\n    if (changes['isOpen']) {\n      this._updateOpenState();\n    }\n    this._setInfoWindowOptions(changes);\n  }\n\n  /**\n   * Opens the info window.\n   */\n  open(): Promise<void> { return this._infoWindowManager.open(this); }\n\n  /**\n   * Closes the info window.\n   */\n  close(): Promise<void> {\n    return this._infoWindowManager.close(this).then(() => { this.infoWindowClose.emit(); });\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return 'AgmInfoWindow-' + this._id.toString(); }\n\n  /** @internal */\n  ngOnDestroy() { this._infoWindowManager.deleteInfoWindow(this); }\n\n  private _registerEventListeners() {\n    this._infoWindowManager.createEventObservable('closeclick', this).subscribe(() => {\n      this.isOpen = false;\n      this.infoWindowClose.emit();\n    });\n  }\n\n  private _updateOpenState() {\n    this.isOpen ? this.open() : this.close();\n  }\n\n  private _setInfoWindowOptions(changes: {[key: string]: SimpleChange}) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys = Object.keys(changes).filter(\n        k => AgmInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    this._infoWindowManager.setOptions(this, options);\n  }\n}\n","import { Directive, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, Input, Output } from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {KmlMouseEvent} from './../services/google-maps-types';\nimport {KmlLayerManager} from './../services/managers/kml-layer-manager';\n\nlet layerId = 0;\n\n@Directive({\n  selector: 'agm-kml-layer'\n})\nexport class AgmKmlLayer implements OnInit, OnDestroy, OnChanges {\n  private static _kmlLayerOptions: string[] =\n      ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\n  /**\n   * If true, the layer receives mouse events. Default value is true.\n   */\n  @Input() clickable: boolean = true;\n  /**\n   * By default, the input map is centered and zoomed to the bounding box of the contents of the\n   * layer.\n   * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n   * were never set.\n   */\n  @Input() preserveViewport: boolean = false;\n  /**\n   * Whether to render the screen overlays. Default true.\n   */\n  @Input() screenOverlays: boolean = true;\n  /**\n   * Suppress the rendering of info windows when layer features are clicked.\n   */\n  @Input() suppressInfoWindows: boolean = false;\n  /**\n   * The URL of the KML document to display.\n   */\n  @Input() url: string = null;\n  /**\n   * The z-index of the layer.\n   */\n  @Input() zIndex: number|null = null;\n  /**\n   * This event is fired when a feature in the layer is clicked.\n   */\n  @Output() layerClick: EventEmitter<KmlMouseEvent> = new EventEmitter<KmlMouseEvent>();\n  /**\n   * This event is fired when the KML layers default viewport has changed.\n   */\n  @Output() defaultViewportChange: EventEmitter<void> = new EventEmitter<void>();\n  /**\n   * This event is fired when the KML layer has finished loading.\n   * At this point it is safe to read the status property to determine if the layer loaded\n   * successfully.\n   */\n  @Output() statusChange: EventEmitter<void> = new EventEmitter<void>();\n  private _addedToManager: boolean = false;\n  private _id: string = (layerId++).toString();\n  private _subscriptions: Subscription[] = [];\n\n  constructor(private _manager: KmlLayerManager) {}\n\n  ngOnInit() {\n    if (this._addedToManager) {\n      return;\n    }\n    this._manager.addKmlLayer(this);\n    this._addedToManager = true;\n    this._addEventListeners();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._addedToManager) {\n      return;\n    }\n    this._updatePolygonOptions(changes);\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return `AgmKmlLayer-${this._id.toString()}`; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._manager.deleteKmlLayer(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  private _updatePolygonOptions(changes: SimpleChanges) {\n    const options = Object.keys(changes)\n                        .filter(k => AgmKmlLayer._kmlLayerOptions.indexOf(k) !== -1)\n                        .reduce((obj: any, k: string) => {\n                          obj[k] = changes[k].currentValue;\n                          return obj;\n                        }, {});\n    if (Object.keys(options).length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  private _addEventListeners() {\n    const listeners = [\n      {name: 'click', handler: (ev: KmlMouseEvent) => this.layerClick.emit(ev)},\n      {name: 'defaultviewport_changed', handler: () => this.defaultViewportChange.emit()},\n      {name: 'status_changed', handler: () => this.statusChange.emit()},\n    ];\n    listeners.forEach((obj) => {\n      const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n  }\n}\n","import { Directive, EventEmitter, OnDestroy, OnInit, OnChanges, SimpleChanges, Input, Output } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DataMouseEvent, DataOptions } from './../services/google-maps-types';\nimport { DataLayerManager } from './../services/managers/data-layer-manager';\n\nlet layerId = 0;\n\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\n@Directive({\n  selector: 'agm-data-layer'\n})\nexport class AgmDataLayer implements OnInit, OnDestroy, OnChanges {\n  private static _dataOptionsAttributes: Array<string> = ['style'];\n  /**\n   * This event is fired when a feature in the layer is clicked.\n   */\n  @Output() layerClick: EventEmitter<DataMouseEvent> = new EventEmitter<DataMouseEvent>();\n  /**\n   * The geoJson to be displayed\n   */\n  @Input() geoJson: Object | string | null = null;\n  /**\n   * The layer's style function.\n   */\n  @Input() style: () => void;\n  private _addedToManager: boolean = false;\n  private _id: string = (layerId++).toString();\n  private _subscriptions: Subscription[] = [];\n\n  constructor(private _manager: DataLayerManager) { }\n\n  ngOnInit() {\n    if (this._addedToManager) {\n      return;\n    }\n    this._manager.addDataLayer(this);\n    this._addedToManager = true;\n    this._addEventListeners();\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return `AgmDataLayer-${this._id.toString()}`; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._manager.deleteDataLayer(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  /** @internal */\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._addedToManager) {\n      return;\n    }\n\n    var geoJsonChange = changes['geoJson'];\n    if (geoJsonChange) {\n      this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n    }\n\n    let dataOptions: DataOptions = {};\n\n    AgmDataLayer._dataOptionsAttributes.forEach(k => (<any>dataOptions)[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : (<any>this)[k]);\n\n    this._manager.setDataOptions(this, dataOptions);\n  }\n\n  private _addEventListeners() {\n    const listeners = [\n      { name: 'click', handler: (ev: DataMouseEvent) => this.layerClick.emit(ev) },\n    ];\n    listeners.forEach((obj) => {\n      const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n  }\n}\n","import {Directive, EventEmitter, OnChanges, OnDestroy, SimpleChange,\n  AfterContentInit, ContentChildren, QueryList, Input, Output\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {MouseEvent} from '../map-types';\nimport * as mapTypes from '../services/google-maps-types';\nimport {MarkerManager} from '../services/managers/marker-manager';\n\nimport {AgmInfoWindow} from './info-window';\nimport {MarkerLabel} from '../map-types';\n\nlet markerId = 0;\n\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Directive({\n  selector: 'agm-marker',\n  inputs: [\n    'latitude', 'longitude', 'title', 'label', 'draggable: markerDraggable', 'iconUrl',\n    'openInfoWindow', 'opacity', 'visible', 'zIndex', 'animation'\n  ],\n  outputs: ['markerClick', 'dragEnd', 'mouseOver', 'mouseOut']\n})\nexport class AgmMarker implements OnDestroy, OnChanges, AfterContentInit {\n  /**\n   * The latitude position of the marker.\n   */\n  @Input() latitude: number;\n\n  /**\n   * The longitude position of the marker.\n   */\n  @Input() longitude: number;\n\n  /**\n   * The title of the marker.\n   */\n  @Input() title: string;\n\n  /**\n   * The label (a single uppercase character) for the marker.\n   */\n  @Input() label: string | MarkerLabel;\n\n  /**\n   * If true, the marker can be dragged. Default value is false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('markerDraggable') draggable: boolean = false;\n\n  /**\n   * Icon (the URL of the image) for the foreground.\n   */\n  @Input() iconUrl: string;\n\n  /**\n   * If true, the marker is visible\n   */\n  @Input() visible: boolean = true;\n\n  /**\n   * Whether to automatically open the child info window when the marker is clicked.\n   */\n  @Input() openInfoWindow: boolean = true;\n\n  /**\n   * The marker's opacity between 0.0 and 1.0.\n   */\n  @Input() opacity: number = 1;\n\n  /**\n   * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n   * front of markers with lower values. By default, markers are displayed according to their\n   * vertical position on screen, with lower markers appearing in front of markers further up the\n   * screen.\n   */\n  @Input() zIndex: number = 1;\n\n  /**\n   * If true, the marker can be clicked. Default value is true.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('markerClickable') clickable: boolean = true;\n\n  /**\n   * Which animation to play when marker is added to a map.\n   * This can be 'BOUNCE' or 'DROP'\n   */\n  animation: 'BOUNCE' | 'DROP' | null;\n\n  /**\n   * This event emitter gets emitted when the user clicks on the marker.\n   */\n  @Output() markerClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * This event is fired when the user stops dragging the marker.\n   */\n  @Output() dragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user mouses over the marker.\n   */\n  @Output() mouseOver: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user mouses outside the marker.\n   */\n  @Output() mouseOut: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * @internal\n   */\n  @ContentChildren(AgmInfoWindow) infoWindow: QueryList<AgmInfoWindow> = new QueryList<AgmInfoWindow>();\n\n  private _markerAddedToManger: boolean = false;\n  private _id: string;\n  private _observableSubscriptions: Subscription[] = [];\n\n  constructor(private _markerManager: MarkerManager) { this._id = (markerId++).toString(); }\n\n  /* @internal */\n  ngAfterContentInit() {\n    this.handleInfoWindowUpdate();\n    this.infoWindow.changes.subscribe(() => this.handleInfoWindowUpdate());\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n      return;\n    }\n    if (!this._markerAddedToManger) {\n      this._markerManager.addMarker(this);\n      this._markerAddedToManger = true;\n      this._addEventListeners();\n      return;\n    }\n    if (changes['latitude'] || changes['longitude']) {\n      this._markerManager.updateMarkerPosition(this);\n    }\n    if (changes['title']) {\n      this._markerManager.updateTitle(this);\n    }\n    if (changes['label']) {\n      this._markerManager.updateLabel(this);\n    }\n    if (changes['draggable']) {\n      this._markerManager.updateDraggable(this);\n    }\n    if (changes['iconUrl']) {\n      this._markerManager.updateIcon(this);\n    }\n    if (changes['opacity']) {\n      this._markerManager.updateOpacity(this);\n    }\n    if (changes['visible']) {\n      this._markerManager.updateVisible(this);\n    }\n    if (changes['zIndex']) {\n      this._markerManager.updateZIndex(this);\n    }\n    if (changes['clickable']) {\n      this._markerManager.updateClickable(this);\n    }\n    if (changes['animation']) {\n      this._markerManager.updateAnimation(this);\n    }\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return 'AgmMarker-' + this._id.toString(); }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._markerManager.deleteMarker(this);\n    // unsubscribe all registered observable subscriptions\n    this._observableSubscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  private handleInfoWindowUpdate() {\n    if (this.infoWindow.length > 1) {\n      throw new Error('Expected no more than one info window.');\n    }\n    this.infoWindow.forEach(marker => {\n      marker.hostMarker = this;\n    });\n  }\n\n  private _addEventListeners() {\n    const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {\n      if (this.openInfoWindow) {\n        this.infoWindow.forEach(infoWindow => infoWindow.open());\n      }\n      this.markerClick.emit(null);\n    });\n    this._observableSubscriptions.push(cs);\n\n    const ds =\n        this._markerManager.createEventObservable<mapTypes.MouseEvent>('dragend', this)\n            .subscribe((e: mapTypes.MouseEvent) => {\n              this.dragEnd.emit(<MouseEvent>{coords: {lat: e.latLng.lat(), lng: e.latLng.lng()}});\n            });\n    this._observableSubscriptions.push(ds);\n\n    const mover =\n        this._markerManager.createEventObservable<mapTypes.MouseEvent>('mouseover', this)\n            .subscribe((e: mapTypes.MouseEvent) => {\n              this.mouseOver.emit(<MouseEvent>{coords: {lat: e.latLng.lat(), lng: e.latLng.lng()}});\n            });\n    this._observableSubscriptions.push(mover);\n\n    const mout =\n        this._markerManager.createEventObservable<mapTypes.MouseEvent>('mouseout', this)\n            .subscribe((e: mapTypes.MouseEvent) => {\n              this.mouseOut.emit(<MouseEvent>{coords: {lat: e.latLng.lat(), lng: e.latLng.lng()}});\n            });\n    this._observableSubscriptions.push(mout);\n  }\n}\n","import { AfterContentInit, Directive, EventEmitter, OnChanges, OnDestroy, SimpleChanges, Input, Output } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { LatLng, LatLngLiteral, PolyMouseEvent, PolygonOptions } from '../services/google-maps-types';\nimport { PolygonManager } from '../services/managers/polygon-manager';\n\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: Array<LatLngLiteral> = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: Array<Array<LatLngLiteral>> = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\n@Directive({\n  selector: 'agm-polygon'\n})\nexport class AgmPolygon implements OnDestroy, OnChanges, AfterContentInit {\n  private static _polygonOptionsAttributes: Array<string> = [\n    'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\n    'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\n    'editable', 'visible'\n  ];\n  /**\n   * Indicates whether this Polygon handles mouse events. Defaults to true.\n   */\n  @Input() clickable: boolean = true;\n  /**\n   * If set to true, the user can drag this shape over the map. The geodesic\n   * property defines the mode of dragging. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('polyDraggable') draggable: boolean = false;\n  /**\n   * If set to true, the user can edit this shape by dragging the control\n   * points shown at the vertices and on each segment. Defaults to false.\n   */\n  @Input() editable: boolean = false;\n  /**\n   * The fill color. All CSS3 colors are supported except for extended\n   * named colors.\n   */\n  @Input() fillColor: string;\n  /**\n   * The fill opacity between 0.0 and 1.0\n   */\n  @Input() fillOpacity: number;\n  /**\n   * When true, edges of the polygon are interpreted as geodesic and will\n   * follow the curvature of the Earth. When false, edges of the polygon are\n   * rendered as straight lines in screen space. Note that the shape of a\n   * geodesic polygon may appear to change when dragged, as the dimensions\n   * are maintained relative to the surface of the earth. Defaults to false.\n   */\n  @Input() geodesic: boolean = false;\n  /**\n   * The ordered sequence of coordinates that designates a closed loop.\n   * Unlike polylines, a polygon may consist of one or more paths.\n   *  As a result, the paths property may specify one or more arrays of\n   * LatLng coordinates. Paths are closed automatically; do not repeat the\n   * first vertex of the path as the last vertex. Simple polygons may be\n   * defined using a single array of LatLngs. More complex polygons may\n   * specify an array of arrays. Any simple arrays are converted into Arrays.\n   * Inserting or removing LatLngs from the Array will automatically update\n   * the polygon on the map.\n   */\n  @Input() paths: Array<LatLng|LatLngLiteral>|Array<Array<LatLng|LatLngLiteral>> = [];\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended\n   * named colors.\n   */\n  @Input() strokeColor: string;\n  /**\n   * The stroke opacity between 0.0 and 1.0\n   */\n  @Input() strokeOpacity: number;\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight: number;\n  /**\n   * Whether this polygon is visible on the map. Defaults to true.\n   */\n  @Input() visible: boolean;\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n  /**\n   * This event is fired when the DOM click event is fired on the Polygon.\n   */\n  @Output() polyClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This event is fired when the DOM dblclick event is fired on the Polygon.\n   */\n  @Output() polyDblClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This event is repeatedly fired while the user drags the polygon.\n   */\n  @Output() polyDrag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired when the user stops dragging the polygon.\n   */\n  @Output() polyDragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired when the user starts dragging the polygon.\n   */\n  @Output() polyDragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired when the DOM mousedown event is fired on the Polygon.\n   */\n  @Output() polyMouseDown: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This event is fired when the DOM mousemove event is fired on the Polygon.\n   */\n  @Output() polyMouseMove: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This event is fired on Polygon mouseout.\n   */\n  @Output() polyMouseOut: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This event is fired on Polygon mouseover.\n   */\n  @Output() polyMouseOver: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This event is fired whe the DOM mouseup event is fired on the Polygon\n   */\n  @Output() polyMouseUp: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This even is fired when the Polygon is right-clicked on.\n   */\n  @Output() polyRightClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  private _id: string;\n  private _polygonAddedToManager: boolean = false;\n  private _subscriptions: Subscription[] = [];\n\n  constructor(private _polygonManager: PolygonManager) {}\n\n  /** @internal */\n  ngAfterContentInit() {\n    if (!this._polygonAddedToManager) {\n      this._init();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): any {\n    if (!this._polygonAddedToManager) {\n      this._init();\n      return;\n    }\n\n    this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._polygonManager.deletePolygon(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  private _init() {\n    this._polygonManager.addPolygon(this);\n    this._polygonAddedToManager = true;\n    this._addEventListeners();\n  }\n\n  private _addEventListeners() {\n    const handlers = [\n      {name: 'click', handler: (ev: PolyMouseEvent) => this.polyClick.emit(ev)},\n      {name: 'dbclick', handler: (ev: PolyMouseEvent) => this.polyDblClick.emit(ev)},\n      {name: 'drag', handler: (ev: MouseEvent) => this.polyDrag.emit(ev)},\n      {name: 'dragend', handler: (ev: MouseEvent) => this.polyDragEnd.emit(ev)},\n      {name: 'dragstart', handler: (ev: MouseEvent) => this.polyDragStart.emit(ev)},\n      {name: 'mousedown', handler: (ev: PolyMouseEvent) => this.polyMouseDown.emit(ev)},\n      {name: 'mousemove', handler: (ev: PolyMouseEvent) => this.polyMouseMove.emit(ev)},\n      {name: 'mouseout', handler: (ev: PolyMouseEvent) => this.polyMouseOut.emit(ev)},\n      {name: 'mouseover', handler: (ev: PolyMouseEvent) => this.polyMouseOver.emit(ev)},\n      {name: 'mouseup', handler: (ev: PolyMouseEvent) => this.polyMouseUp.emit(ev)},\n      {name: 'rightclick', handler: (ev: PolyMouseEvent) => this.polyRightClick.emit(ev)},\n    ];\n    handlers.forEach((obj) => {\n      const os = this._polygonManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n  }\n\n  private _updatePolygonOptions(changes: SimpleChanges): PolygonOptions {\n    return Object.keys(changes)\n        .filter(k => AgmPolygon._polygonOptionsAttributes.indexOf(k) !== -1)\n        .reduce((obj: any, k: string) => {\n          obj[k] = changes[k].currentValue;\n          return obj;\n        }, {});\n  }\n}\n","import {Directive, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\nimport {LatLngLiteral} from '../services/google-maps-types';\n\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * SembGoogleMapPolyline}\n */\n@Directive({selector: 'agm-polyline-point'})\nexport class AgmPolylinePoint implements OnChanges {\n  /**\n   * The latitude position of the point.\n   */\n  @Input() public latitude: number;\n\n  /**\n   * The longitude position of the point;\n   */\n  @Input() public longitude: number;\n\n  /**\n   * This event emitter gets emitted when the position of the point changed.\n   */\n  @Output() positionChanged: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\n\n  constructor() {}\n\n  ngOnChanges(changes: SimpleChanges): any {\n    if (changes['latitude'] || changes['longitude']) {\n      const position: LatLngLiteral = <LatLngLiteral>{\n        lat: changes['latitude'].currentValue,\n        lng: changes['longitude'].currentValue\n      };\n      this.positionChanged.emit(position);\n    }\n  }\n}\n","import { AfterContentInit, ContentChildren, Directive, EventEmitter, OnChanges, OnDestroy, QueryList, SimpleChanges, Input, Output } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { PolyMouseEvent } from '../services/google-maps-types';\nimport { PolylineManager } from '../services/managers/polyline-manager';\nimport { AgmPolylinePoint } from './polyline-point';\n\nlet polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Directive({\n  selector: 'agm-polyline'\n})\nexport class AgmPolyline implements OnDestroy, OnChanges, AfterContentInit {\n  private static _polylineOptionsAttributes: Array<string> = [\n    'draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight',\n    'zIndex'\n  ];\n  /**\n   * Indicates whether this Polyline handles mouse events. Defaults to true.\n   */\n  @Input() clickable: boolean = true;\n  /**\n   * If set to true, the user can drag this shape over the map. The geodesic property defines the\n   * mode of dragging. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('polylineDraggable') draggable: boolean = false;\n  /**\n   * If set to true, the user can edit this shape by dragging the control points shown at the\n   * vertices and on each segment. Defaults to false.\n   */\n  @Input() editable: boolean = false;\n  /**\n   * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n   * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n   * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n   * are maintained relative to the surface of the earth. Defaults to false.\n   */\n  @Input() geodesic: boolean = false;\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() strokeColor: string;\n  /**\n   * The stroke opacity between 0.0 and 1.0.\n   */\n  @Input() strokeOpacity: number;\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight: number;\n  /**\n   * Whether this polyline is visible on the map. Defaults to true.\n   */\n  @Input() visible: boolean = true;\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n  /**\n   * This event is fired when the DOM click event is fired on the Polyline.\n   */\n  @Output() lineClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This event is fired when the DOM dblclick event is fired on the Polyline.\n   */\n  @Output() lineDblClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This event is repeatedly fired while the user drags the polyline.\n   */\n  @Output() lineDrag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired when the user stops dragging the polyline.\n   */\n  @Output() lineDragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired when the user starts dragging the polyline.\n   */\n  @Output() lineDragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  /**\n   * This event is fired when the DOM mousedown event is fired on the Polyline.\n   */\n  @Output() lineMouseDown: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This event is fired when the DOM mousemove event is fired on the Polyline.\n   */\n  @Output() lineMouseMove: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This event is fired on Polyline mouseout.\n   */\n  @Output() lineMouseOut: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This event is fired on Polyline mouseover.\n   */\n  @Output() lineMouseOver: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This event is fired whe the DOM mouseup event is fired on the Polyline\n   */\n  @Output() lineMouseUp: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This even is fired when the Polyline is right-clicked on.\n   */\n  @Output() lineRightClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n  /**\n   * This even is fired when a point in the path is updated\n   */\n  @Output() pointUpdated: EventEmitter<any> = new EventEmitter<any>();\n  /**\n   * @internal\n   */\n  @ContentChildren(AgmPolylinePoint) points: QueryList<AgmPolylinePoint>;\n  private _id: string;\n  private _polylineAddedToManager: boolean = false;\n  private _subscriptions: Subscription[] = [];\n\n  constructor(private _polylineManager: PolylineManager) { this._id = (polylineId++).toString(); }\n\n  /** @internal */\n  ngAfterContentInit() {\n    if (this.points.length) {\n      this.points.forEach((point: AgmPolylinePoint) => {\n        const s = point.positionChanged.subscribe(\n            () => { this._polylineManager.updatePolylinePoints(this).then(() => this.attachObservables()); });\n        this._subscriptions.push(s);\n      });\n    }\n    if (!this._polylineAddedToManager) {\n      this._init();\n    }\n    const s = this.points.changes.subscribe(() =>  {\n      this._polylineManager.updatePolylinePoints(this).then(() => this.attachObservables());\n    });\n    this._subscriptions.push(s);\n    this._polylineManager.updatePolylinePoints(this).then(() => this.attachObservables());\n  }\n\n  /** @internal */\n  ngOnChanges(changes: SimpleChanges): any {\n    if (!this._polylineAddedToManager) {\n      this._init();\n      return;\n    }\n\n    let options: {[propName: string]: any} = {};\n    const optionKeys = Object.keys(changes).filter(\n        k => AgmPolyline._polylineOptionsAttributes.indexOf(k) !== -1);\n    optionKeys.forEach(k => options[k] = changes[k].currentValue);\n    this._polylineManager.setPolylineOptions(this, options);\n  }\n\n  /** @internal */\n  attachObservables() {\n      this._polylineManager.createEventObservableOnPath('set_at', this).subscribe((result: any) => {\n          this.pointUpdated.emit(result);\n      });\n  }\n\n  /** @internal */\n  _getPoints(): Array<AgmPolylinePoint> {\n    if (this.points) {\n      return this.points.toArray();\n    }\n    return [];\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._polylineManager.deletePolyline(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  private _init() {\n    this._polylineManager.addPolyline(this);\n    this._polylineAddedToManager = true;\n    this._addEventListeners();\n  }\n\n  private _addEventListeners() {\n    const handlers = [\n      {name: 'click', handler: (ev: PolyMouseEvent) => this.lineClick.emit(ev)},\n      {name: 'dblclick', handler: (ev: PolyMouseEvent) => this.lineDblClick.emit(ev)},\n      {name: 'drag', handler: (ev: MouseEvent) => this.lineDrag.emit(ev)},\n      {name: 'dragend', handler: (ev: MouseEvent) => this.lineDragEnd.emit(ev)},\n      {name: 'dragstart', handler: (ev: MouseEvent) => this.lineDragStart.emit(ev)},\n      {name: 'mousedown', handler: (ev: PolyMouseEvent) => this.lineMouseDown.emit(ev)},\n      {name: 'mousemove', handler: (ev: PolyMouseEvent) => this.lineMouseMove.emit(ev)},\n      {name: 'mouseout', handler: (ev: PolyMouseEvent) => this.lineMouseOut.emit(ev)},\n      {name: 'mouseover', handler: (ev: PolyMouseEvent) => this.lineMouseOver.emit(ev)},\n      {name: 'mouseup', handler: (ev: PolyMouseEvent) => this.lineMouseUp.emit(ev)},\n      {name: 'rightclick', handler: (ev: PolyMouseEvent) => this.lineRightClick.emit(ev)},\n    ];\n    handlers.forEach((obj) => {\n      const os = this._polylineManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChange,\n  ViewChild\n} from '@angular/core';\nimport {GoogleMapsAPIWrapper} from '../services/google-maps-api-wrapper';\nimport {SearchBoxManager} from '../services/managers/search-box-manager';\n\ndeclare var google: any;\n\n/**\n * AgmSearchBox allows to add a search box to the map\n *\n * ### Example\n *\n * ```\n * <agm-search-box [placeholder]=\"'Search'\" [position]=\"ControlPosition.TOP_LEFT\"\n *   (placesChange)=\"updateRef($event)\"></agm-search-box>\n * ```\n *\n */\n@Component({\n  selector: 'agm-search-box',\n  template: '<input type=\"text\" class=\"search-box\" #panel placeholder=\"{{placeholder}}\">',\n  styles: [\n    `.search-box {\n        background-color: #fff;\n        font-family: Roboto;\n        font-size: 15px;\n        font-weight: 300;\n        margin-left: 12px;\n        padding: 0 11px 0 13px;\n        text-overflow: ellipsis;\n        width: 300px;\n        margin-top: 10px;\n        height: 26px;\n      }\n\n      .search-box:focus {\n        border-color: #4d90fe;\n      }`\n  ]\n})\nexport class AgmSearchBox implements OnInit, OnChanges {\n  /**\n   * @internal\n   */\n  @ViewChild('panel') panel: ElementRef;\n  /**\n   * Placeholder for the search box input\n   */\n  @Input() placeholder: string;\n  /**\n   * Position in which the control is going to placed\n   * This input is required otherwise the box won't be added to the map\n   */\n  @Input() position: google.maps.ControlPosition;\n  /**\n   * Will automatically center the map to the clicked result\n   */\n  @Input() autoBoundResults: boolean = true;\n  /**\n   * The area towards which to bias query predictions. Predictions are biased towards, but not restricted to, queries targeting these bounds.\n   */\n  @Input() bounds: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral;\n  /**\n   * This event is fired when the user selects a query, will return the places matching that query.\n   */\n  @Output() placesChange: EventEmitter<Array<google.maps.places.PlaceResult>> = new EventEmitter<Array<google.maps.places.PlaceResult>>();\n  private searchBox: google.maps.places.SearchBox;\n\n  constructor(private gmapsApi: GoogleMapsAPIWrapper, private _manager: SearchBoxManager) {}\n  /** @internal */\n  ngOnInit(): void {\n    this.gmapsApi.getNativeMap().then(map => {\n      this._manager.createEventObservable(this).subscribe(() => {\n        this.placesChange.emit(this.getSearchBoxEl().getPlaces());\n        if (this.autoBoundResults) {\n          this.autoBound();\n        }\n      });\n    });\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    this.gmapsApi.getNativeMap().then(map => {\n      if (changes['bounds']) {\n        this.getSearchBoxEl().setBounds(this.bounds);\n      }\n      if (changes['position']) {\n        this.updatePosition(this.position);\n      }\n    });\n  }\n  /** @internal */\n  getSearchBoxEl(): google.maps.places.SearchBox {\n    if (this.searchBox === undefined) {\n      this.searchBox = new google.maps.places.SearchBox(this.panel.nativeElement, {\n        bounds: this.bounds\n      });\n    }\n    return this.searchBox;\n  }\n  /** @internal */\n  updatePosition(position: google.maps.ControlPosition) {\n    if (position) {\n      this.gmapsApi.getControls().then((controls: google.maps.MVCArray<Node>[]) => {\n        controls[position].push(this.panel.nativeElement);\n      });\n    }\n  }\n  /** @internal */\n  autoBound() {\n    const places = this.getSearchBoxEl().getPlaces();\n\n    if (places.length === 0) {\n      return;\n    }\n\n    // For each place, get the icon, name and location.\n    const bounds = new google.maps.LatLngBounds();\n    places.forEach((place: google.maps.places.PlaceResult) => {\n      if (!place.geometry) {\n        console.log('Place does not contain a geometry');\n        return;\n      }\n\n      if (place.geometry.viewport) {\n        // Only geocodes have viewport.\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    this.gmapsApi.fitBounds(bounds);\n  }\n\n}\n","import {Component, ElementRef, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {GoogleMapsAPIWrapper} from '../services/google-maps-api-wrapper';\n\n/**\n * AgmMapControl allows to add a custom control to the map\n *\n * See [Positioning Custom Controls]{@link https://developers.google.com/maps/documentation/javascript/controls?hl=en#CustomPositioning}\n *\n * ### Example\n *\n * ```\n * <agm-control [position]=\"position\">\n *   <div content>\n *       <!-- my markup -->\n *   </div>\n * </agm-control>\n * ```\n *\n */\n@Component({\n  selector: 'agm-control',\n  template: '<ng-content select=\"[content]\"></ng-content>',\n})\nexport class AgmControl implements OnChanges {\n  /**\n   *  Position of the control\n   */\n  @Input() position: google.maps.ControlPosition;\n\n  constructor(private elm: ElementRef, private _mapsWrapper: GoogleMapsAPIWrapper) {}\n\n  /* @internal */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['position'] && this.position) {\n      this._mapsWrapper.getControls().then((controls: google.maps.MVCArray<Node>[]) => {\n        const index = this.getElementIndex(controls, changes);\n        if (index !== null) {\n          controls[changes['position'].previousValue].removeAt(index);\n        }\n\n        controls[this.position].push(this.elm.nativeElement);\n      });\n    } else if (changes['position'] && changes['position'].currentValue === null && changes['position'].previousValue !== null) {\n      this._mapsWrapper.getControls().then((controls: google.maps.MVCArray<Node>[]) => {\n        const index = this.getElementIndex(controls, changes);\n        if (index !== null) {\n          controls[changes['position'].previousValue].removeAt(index);\n        }\n      });\n    }\n  }\n\n  private getElementIndex(controls: google.maps.MVCArray<Node>[], changes: SimpleChanges) {\n    if (!controls[changes['position'].previousValue]) {\n      return null;\n    }\n    let index = null;\n    controls[changes['position'].previousValue].forEach((elem, i) => {\n      if (elem === this.elm.nativeElement) {\n        index = i;\n        return null;\n      }\n    });\n    return index;\n  }\n}\n","import {Directive, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output} from '@angular/core';\n\nimport {GoogleMapsAPIWrapper} from '../services/google-maps-api-wrapper';\n\ndeclare let google: any;\n\n@Directive({\n    selector: 'agm-route'\n})\n\nexport class AgmRoute implements OnInit, OnChanges, OnDestroy {\n    @Input() nodes: string[] | google.maps.LatLng[] | google.maps.LatLngLiteral[] | google.maps.Place[];\n    @Input() optimized = false;\n    @Input() info;\n    @Input() model;\n    @Input() display;\n    @Input() strokeColor;\n    directionsDisplay: google.maps.DirectionsRenderer;\n\n    @Output() displayed: EventEmitter<google.maps.DirectionsResult> = new EventEmitter<google.maps.DirectionsResult>();\n\n    constructor(private gmapsApi: GoogleMapsAPIWrapper) {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n        if (this.nodes && this.nodes.length > 25) {\n            alert('No es posible mostrar mas de 25 puntos por ruta.');\n            alert('Google does not allow more than 25 points bt route.');\n            return;\n        }\n        if (!!this.directionsDisplay) {\n            this.directionsDisplay.setMap(null); // reset route\n        }\n\n        this.gmapsApi.getNativeMap().then(map => {\n            const directionsService = new google.maps.DirectionsService;\n            this.directionsDisplay = new google.maps.DirectionsRenderer({\n              // draggable: true,\n              map: map,\n              // panel: document.getElementById('right-panel')\n            });\n            if (!!this.nodes) {\n              const [first, ...others] = this.nodes;\n              // ;\n              const options: google.maps.DirectionsRequest = {\n                  origin: first,\n                  destination: this.nodes[this.nodes.length - 1],\n                  optimizeWaypoints: this.optimized,\n                  // strokeColor: this.strokeColor,\n                  travelMode: google.maps.TravelMode.DRIVING\n              };\n              if (this.nodes.length > 2) {\n                const [last, ...middle] = others.reverse();\n                options.waypoints = middle.reverse() // reverse back because it needs to keep the positions\n                  .map((item) => ({\n                      location: item as google.maps.LatLng,\n                      stopover: true,\n                    }));\n              }\n              if (!!options.origin) {\n\n                  directionsService.route(options, (response, status) => {\n                      if (status === google.maps.DirectionsStatus.OK) {\n                          this.directionsDisplay.setDirections(response);\n                          this.displayed.emit(response);\n                          // this.computeTotalDistance(response);\n                          if (!!this.model) {\n                              this.model.directionResult = response;\n                          }\n\n                      } else {\n                          window.alert('Directions request failed due to ' + status);\n                      }\n                  });\n              }\n\n            } else if (!!this.display) {\n                this.directionsDisplay.setDirections(this.display);\n                // this.computeTotalDistance(this.display);\n            }\n        });\n    }\n\n    // computeTotalDistance(result: any): void {\n    //     if (this.info) {\n    //         moment.locale('es');\n    //\n    //         let totalKm = 0;\n    //         let totalTime = 0;\n    //         const myRoute = result.routes[0];\n    //         for (let i = 0; i < myRoute.legs.length; i++) {\n    //             totalKm += myRoute.legs[i].distance.value;\n    //             totalTime += myRoute.legs[i].duration.value;\n    //         }\n    //         const duration = moment.duration(totalTime, 'seconds');\n    //         totalKm = totalKm / 1000;\n    //         this.info.innerHTML = `Distancia: ${totalKm}km. Tiempo: ${duration.humanize()}`;\n    //     }\n    //\n    // }\n\n    ngOnDestroy() {\n      this.directionsDisplay.setMap(null);\n      // unsubscribe all registered observable subscriptions\n      // this._subscriptions.forEach((s) => s.unsubscribe());\n    }\n}\n","import {Provider} from '@angular/core';\n\nexport class WindowRef {\n  getNativeWindow(): any { return window; }\n}\n\nexport class DocumentRef {\n  getNativeDocument(): any { return document; }\n}\n\nexport const BROWSER_GLOBALS_PROVIDERS: Provider[] = [WindowRef, DocumentRef];\n","export var google: any;\n\nexport interface MVCObject {\n  addListener(eventName: string, handler: Function): MapsEventListener;\n}\n\nexport interface MVCArray<T> extends MVCObject {\n  clear(): void;\n  getArray(): Array<T>;\n  getAt(i: number): T;\n  getLength(): number;\n  insertAt(i: number, elem: T): void;\n  pop(): T;\n  push(elem: T): number;\n  removeAt(i: number): T;\n  setAt(i: number, elem: T): void;\n  /* tslint:disable */\n  /*\n  * Tslint configuration check-parameters will prompt errors for these lines of code.\n  * https://palantir.github.io/tslint/rules/no-unused-variable/\n  */\n  forEach(callback: (elem: T, i: number) => void): void;\n  /* tslint:enable */\n}\n\nexport interface GoogleMap extends MVCObject {\n  data?: Data;\n  controls: MVCArray<Node>[];\n  constructor(el: HTMLElement, opts?: MapOptions): void;\n  panTo(latLng: LatLng | LatLngLiteral): void;\n  panBy(x: number, y: number): void;\n  setZoom(zoom: number): void;\n  getCenter(): LatLng;\n  setCenter(latLng: LatLng | LatLngLiteral): void;\n  getBounds(): LatLngBounds;\n  getMapTypeId(): MapTypeId;\n  getZoom(): number;\n  setOptions(options: MapOptions): void;\n  panToBounds(latLngBounds: LatLngBounds | LatLngBoundsLiteral, padding?: number | Padding): void;\n  fitBounds(bounds: LatLngBounds | LatLngBoundsLiteral, padding?: number | Padding): void;\n}\n\nexport interface LatLng {\n  constructor(lat: number, lng: number): void;\n  lat(): number;\n  lng(): number;\n  toJSON(): any;\n  toString(): string;\n}\n\nexport interface Marker extends MVCObject {\n  constructor(options?: MarkerOptions): void;\n  setMap(map: GoogleMap): void;\n  setPosition(latLng: LatLng | LatLngLiteral): void;\n  setTitle(title: string): void;\n  setLabel(label: string | MarkerLabel): void;\n  setDraggable(draggable: boolean): void;\n  setIcon(icon: string): void;\n  setOpacity(opacity: number): void;\n  setVisible(visible: boolean): void;\n  setZIndex(zIndex: number): void;\n  setAnimation(animation: any): void;\n  getLabel(): MarkerLabel;\n  setClickable(clickable: boolean): void;\n}\n\nexport interface MarkerOptions {\n  position: LatLng | LatLngLiteral;\n  title?: string;\n  map?: GoogleMap;\n  label?: string | MarkerLabel;\n  draggable?: boolean;\n  icon?: string;\n  opacity?: number;\n  visible?: boolean;\n  zIndex?: number;\n  clickable: boolean;\n  animation?: any;\n}\n\nexport interface MarkerLabel {\n  color: string;\n  fontFamily: string;\n  fontSize: string;\n  fontWeight: string;\n  text: string;\n}\n\nexport interface Circle extends MVCObject {\n  getBounds(): LatLngBounds;\n  getCenter(): LatLng;\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getRadius(): number;\n  getVisible(): boolean;\n  setCenter(center: LatLng | LatLngLiteral): void;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setOptions(options: CircleOptions): void;\n  setRadius(radius: number): void;\n  setVisible(visible: boolean): void;\n}\n\nexport interface CircleOptions {\n  center?: LatLng | LatLngLiteral;\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  fillColor?: string;\n  fillOpacity?: number;\n  map?: GoogleMap;\n  radius?: number;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokePosition?: 'CENTER' | 'INSIDE' | 'OUTSIDE';\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface Rectangle extends MVCObject {\n  getBounds(): LatLngBounds;\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getVisible(): boolean;\n  setBounds(bounds: LatLngBounds | LatLngBoundsLiteral): void;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setOptions(options: RectangleOptions): void;\n  setVisible(visible: boolean): void;\n}\n\nexport interface RectangleOptions {\n  bounds?: LatLngBounds | LatLngBoundsLiteral;\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  fillColor?: string;\n  fillOpacity?: number;\n  map?: GoogleMap;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokePosition?: 'CENTER' | 'INSIDE' | 'OUTSIDE';\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface LatLngBounds {\n  contains(latLng: LatLng): boolean;\n  equals(other: LatLngBounds | LatLngBoundsLiteral): boolean;\n  extend(point: LatLng | LatLngLiteral): void;\n  getCenter(): LatLng;\n  getNorthEast(): LatLng;\n  getSouthWest(): LatLng;\n  intersects(other: LatLngBounds | LatLngBoundsLiteral): boolean;\n  isEmpty(): boolean;\n  toJSON(): LatLngBoundsLiteral;\n  toSpan(): LatLng;\n  toString(): string;\n  toUrlValue(precision?: number): string;\n  union(other: LatLngBounds | LatLngBoundsLiteral): LatLngBounds;\n}\n\nexport interface Padding {\n  top: number;\n  left: number;\n  right: number;\n  bottom: number;\n}\n\nexport interface LatLngBoundsLiteral {\n  east: number;\n  north: number;\n  south: number;\n  west: number;\n}\n\nexport interface LatLngLiteral {\n  lat: number;\n  lng: number;\n}\n\nexport interface MouseEvent { latLng: LatLng; }\n\nexport interface MapOptions {\n  center?: LatLng | LatLngLiteral;\n  zoom?: number;\n  minZoom?: number;\n  maxZoom?: number;\n  controlSize?: number;\n  disableDoubleClickZoom?: boolean;\n  disableDefaultUI?: boolean;\n  scrollwheel?: boolean;\n  backgroundColor?: string;\n  draggable?: boolean;\n  draggableCursor?: string;\n  draggingCursor?: string;\n  keyboardShortcuts?: boolean;\n  styles?: MapTypeStyle[];\n  zoomControl?: boolean;\n  zoomControlOptions?: ZoomControlOptions;\n  streetViewControl?: boolean;\n  streetViewControlOptions?: StreetViewControlOptions;\n  scaleControl?: boolean;\n  scaleControlOptions?: ScaleControlOptions;\n  mapTypeControl?: boolean;\n  mapTypeControlOptions?: MapTypeControlOptions;\n  panControl?: boolean;\n  panControlOptions?: PanControlOptions;\n  rotateControl?: boolean;\n  rotateControlOptions?: RotateControlOptions;\n  fullscreenControl?: boolean;\n  fullscreenControlOptions?: FullscreenControlOptions;\n  mapTypeId?: string | MapTypeId;\n  clickableIcons?: boolean;\n  gestureHandling?: 'cooperative' | 'greedy' | 'none' | 'auto';\n  tilt?: number;\n  restriction?: MapRestriction;\n}\n\nexport interface MapTypeStyle {\n  elementType?: 'all' | 'geometry' | 'geometry.fill' | 'geometry.stroke' | 'labels' | 'labels.icon' |\n  'labels.text' | 'labels.text.fill' | 'labels.text.stroke';\n  featureType?: 'administrative' | 'administrative.country' | 'administrative.land_parcel' |\n  'administrative.locality' | 'administrative.neighborhood' | 'administrative.province' | 'all' |\n  'landscape' | 'landscape.man_made' | 'landscape.natural' | 'landscape.natural.landcover' |\n  'landscape.natural.terrain' | 'poi' | 'poi.attraction' | 'poi.business' | 'poi.government' |\n  'poi.medical' | 'poi.park' | 'poi.place_of_worship' | 'poi.school' | 'poi.sports_complex' | 'road' |\n  'road.arterial' | 'road.highway' | 'road.highway.controlled_access' | 'road.local' | 'transit' |\n  'transit.line' | 'transit.station' | 'transit.station.airport' | 'transit.station.bus' |\n  'transit.station.rail' | 'water';\n  stylers: MapTypeStyler[];\n}\n\n/**\n *  If more than one key is specified in a single MapTypeStyler, all but one will be ignored.\n */\nexport interface MapTypeStyler {\n  color?: string;\n  gamma?: number;\n  hue?: string;\n  invert_lightness?: boolean;\n  lightness?: number;\n  saturation?: number;\n  visibility?: string;\n  weight?: number;\n}\n\nexport interface InfoWindow extends MVCObject {\n  constructor(opts?: InfoWindowOptions): void;\n  close(): void;\n  getContent(): string | Node;\n  getPosition(): LatLng;\n  getZIndex(): number;\n  open(map?: GoogleMap, anchor?: MVCObject): void;\n  setContent(content: string | Node): void;\n  setOptions(options: InfoWindowOptions): void;\n  setPosition(position: LatLng | LatLngLiteral): void;\n  setZIndex(zIndex: number): void;\n}\n\nexport interface MapsEventListener { remove(): void; }\n\nexport interface Size {\n  height: number;\n  width: number;\n  constructor(width: number, height: number, widthUnit?: string, heightUnit?: string): void;\n  equals(other: Size): boolean;\n  toString(): string;\n}\n\nexport interface InfoWindowOptions {\n  content?: string | Node;\n  disableAutoPan?: boolean;\n  maxWidth?: number;\n  pixelOffset?: Size;\n  position?: LatLng | LatLngLiteral;\n  zIndex?: number;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n  equals(other: Point): boolean;\n  toString(): string;\n}\n\nexport interface GoogleSymbol {\n  anchor?: Point;\n  fillColor?: string;\n  fillOpacity?: number;\n  labelOrigin?: Point;\n  path?: string | SymbolPath;\n  rotation?: number;\n  scale?: number;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokeWeight?: number;\n}\n\nexport interface IconSequence {\n  fixedRotation?: boolean;\n  icon?: GoogleSymbol;\n  offset?: string;\n  repeat?: string;\n}\n\nexport enum SymbolPath {\n  BACKWARD_CLOSED_ARROW = 3,\n  BACKWARD_OPEN_ARROW = 4,\n  CIRCLE = 0,\n  FORWARD_CLOSED_ARROW = 1,\n  FORWARD_OPEN_ARROW = 2,\n}\n\nexport interface PolylineOptions {\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  geodesic?: boolean;\n  icon?: Array<IconSequence>;\n  icons?: Array<IconSequence>;\n  map?: GoogleMap;\n  path?: Array<LatLng> | Array<LatLng | LatLngLiteral>;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface Polyline extends MVCObject {\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getPath(): MVCArray<LatLng>;\n  getVisible(): boolean;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setOptions(options: PolylineOptions): void;\n  setPath(path: Array<LatLng | LatLngLiteral>): void;\n  setVisible(visible: boolean): void;\n}\n\n/**\n * PolyMouseEvent gets emitted when the user triggers mouse events on a polyline.\n */\nexport interface PolyMouseEvent extends MouseEvent {\n  edge: number;\n  path: number;\n  vertex: number;\n}\n\nexport interface PolygonOptions {\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  fillColor?: string;\n  fillOpacity?: number;\n  geodesic?: boolean;\n  icon?: Array<IconSequence>;\n  map?: GoogleMap;\n  paths?: Array<LatLng | LatLngLiteral> | Array<Array<LatLng | LatLngLiteral>>;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface Polygon extends MVCObject {\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getPath(): MVCArray<LatLng>;\n  getPaths(): MVCArray<MVCArray<LatLng>>;\n  getVisible(): boolean;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setPath(path: Array<LatLng> | Array<LatLng | LatLngLiteral>): void;\n  setOptions(options: PolygonOptions): void;\n  setPaths(paths: Array<Array<LatLng | LatLngLiteral>> | Array<LatLng | LatLngLiteral>): void;\n  setVisible(visible: boolean): void;\n}\n\nexport interface KmlLayer extends MVCObject {\n  getDefaultViewport(): LatLngBounds;\n  getMap(): GoogleMap;\n  getMetadata(): KmlLayerMetadata;\n  getStatus(): KmlLayerStatus;\n  getUrl(): string;\n  getZIndex(): number;\n  setMap(map: GoogleMap): void;\n  setOptions(options: KmlLayerOptions): void;\n  setUrl(url: string): void;\n  setZIndex(zIndex: number): void;\n}\n\n/**\n * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerStatus\n */\nexport type KmlLayerStatus = 'DOCUMENT_NOT_FOUND' |\n  'DOCUMENT_TOO_LARGE' | 'FETCH_ERROR' | 'INVALID_DOCUMENT' | 'INVALID_REQUEST' |\n  'LIMITS_EXCEEDED' | 'OK' | 'TIMED_OUT' | 'UNKNOWN';\n\n/**\n * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerMetadata\n */\nexport interface KmlLayerMetadata {\n  author: KmlAuthor;\n  description: string;\n  hasScreenOverlays: boolean;\n  name: string;\n  snippet: string;\n}\n\nexport interface KmlAuthor {\n  email: string;\n  name: string;\n  uri: string;\n}\n\nexport interface KmlLayerOptions {\n  clickable?: boolean;\n  map?: GoogleMap;\n  preserveViewport?: boolean;\n  screenOverlays?: boolean;\n  suppressInfoWindows?: boolean;\n  url?: string;\n  zIndex?: number;\n}\n\nexport interface KmlFeatureData {\n  author: KmlAuthor;\n  description: string;\n  id: string;\n  infoWindowHtml: string;\n  name: string;\n  snippet: string;\n}\n\nexport interface KmlMouseEvent extends MouseEvent {\n  featureData: KmlFeatureData;\n  pixelOffset: Size;\n}\n\nexport interface TransitLayer extends MVCObject {\n  getMap(): GoogleMap;\n  setMap(map: GoogleMap): void;\n}\n\nexport interface TransitLayerOptions {\n  visible: boolean;\n}\n\nexport interface BicyclingLayer extends MVCObject {\n  getMap(): GoogleMap;\n  setMap(map: GoogleMap): void;\n}\n\nexport interface BicyclingLayerOptions {\n  visible: boolean;\n}\n\nexport interface Data extends MVCObject {\n  features: Feature[];\n  constructor(options?: DataOptions): void;\n  addGeoJson(geoJson: Object, options?: GeoJsonOptions): Feature[];\n  remove(feature: Feature): void;\n  setControlPosition(controlPosition: google.maps.ControlPosition): void;\n  setControls(controls: string[]): void;\n  setDrawingMode(drawingMode: string): void;\n  setMap(map: GoogleMap): void;\n  /* tslint:disable */\n  /*\n  * Tslint configuration check-parameters will prompt errors for these lines of code.\n  * https://palantir.github.io/tslint/rules/no-unused-variable/\n  */\n  setStyle(style: () => void): void;\n  forEach(callback: (feature: Feature) => void): void;\n  loadGeoJson(url: string, options?: GeoJsonOptions, callback?: (feats: Feature[]) => void): void;\n  /* tslint:enable */\n}\n\nexport interface Feature extends MVCObject {\n  id?: number | string | undefined;\n  geometry: Geometry;\n  properties: any;\n}\n\nexport interface SearchBoxOptions {\n  bounds?: LatLngBounds|LatLngBoundsLiteral;\n}\n\nexport interface DataOptions {\n  controlPosition?: google.maps.ControlPosition;\n  controls?: string[];\n  drawingMode?: string;\n  featureFactory?: (geometry: Geometry) => Feature;\n  map?: GoogleMap;\n  style?: () => void;\n}\n\nexport interface DataMouseEvent extends MouseEvent {\n  feature: Feature;\n}\n\nexport interface GeoJsonOptions {\n  idPropertyName: string;\n}\n\nexport interface Geometry {\n  type: string;\n}\n\nexport enum MapTypeId {\n  /** This map type displays a transparent layer of major streets on satellite images. */\n  HYBRID,\n  /** This map type displays a normal street map. */\n  ROADMAP,\n  /** This map type displays satellite images. */\n  SATELLITE,\n  /** This map type displays maps with physical features such as terrain and vegetation. */\n  TERRAIN,\n}\n\n/***** Controls *****/\n/** Options for the rendering of the map type control. */\nexport interface MapTypeControlOptions {\n  /** IDs of map types to show in the control. */\n  mapTypeIds?: (MapTypeId | string)[];\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_RIGHT.\n   */\n  position?: google.maps.ControlPosition;\n  /** Style id. Used to select what style of map type control to display. */\n  style?: MapTypeControlStyle;\n}\n\nexport enum MapTypeControlStyle {\n  DEFAULT = 0,\n  DROPDOWN_MENU = 2,\n  HORIZONTAL_BAR = 1,\n}\n\nexport interface OverviewMapControlOptions {\n  opened?: boolean;\n}\n\n/** Options for the rendering of the pan control. */\nexport interface PanControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_LEFT.\n   */\n  position?: google.maps.ControlPosition;\n}\n\n/** Options for the rendering of the rotate control. */\nexport interface RotateControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_LEFT.\n   */\n  position?: google.maps.ControlPosition;\n}\n\n/** Options for the rendering of the scale control. */\nexport interface ScaleControlOptions {\n  /** Style id. Used to select what style of scale control to display. */\n  style?: ScaleControlStyle;\n}\n\nexport enum ScaleControlStyle {\n  DEFAULT,\n}\n\n/** Options for the rendering of the Street View pegman control on the map. */\nexport interface StreetViewControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map. The\n   * default position is embedded within the navigation (zoom and pan) controls.\n   * If this position is empty or the same as that specified in the\n   * zoomControlOptions or panControlOptions, the Street View control will be\n   * displayed as part of the navigation controls. Otherwise, it will be displayed\n   * separately.\n   */\n  position?: google.maps.ControlPosition;\n}\n\n/** Options for the rendering of the zoom control. */\nexport interface ZoomControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_LEFT.\n   */\n  position?: google.maps.ControlPosition;\n  style?: ZoomControlStyle;\n}\n\nexport enum ZoomControlStyle {\n  DEFAULT,\n  LARGE,\n  SMALL,\n}\n\n/** Options for the rendering of the fullscreen control. */\nexport interface FullscreenControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is RIGHT_TOP.\n   */\n  position?: google.maps.ControlPosition;\n}\n\n/** Options for the restricting the bounds of the map. */\nexport interface MapRestriction {\n  latLngBounds: LatLngBounds | LatLngBoundsLiteral;\n  strictBounds?: boolean;\n}\n\nexport interface Geocoder {\n  geocode: (request: GeocoderRequest, googleCallback: (results: GeocoderResult[], status: GeocoderStatus) => void) => void;\n}\n\nexport interface GeocoderAddressComponent {\n  long_name: string;\n  short_name: string;\n  types: string[];\n}\n\n/** Options for restricting the geocoder results */\nexport interface GeocoderComponentRestrictions {\n  administrativeArea?: string;\n  country?: string;\n  locality?: string;\n  postalCode?: string;\n  route?: string;\n}\n\nexport interface GeocoderGeometry {\n  bounds: LatLngBounds;\n  location: LatLng;\n  location_type: GeocoderLocationType;\n  viewport: LatLngBounds;\n}\n\nexport enum GeocoderLocationType {\n  APPROXIMATE = 'APPROXIMATE',\n  GEOMETRIC_CENTER = 'GEOMETRIC_CENTER',\n  RANGE_INTERPOLATED = 'RANGE_INTERPOLATED',\n  ROOFTOP = 'ROOFTOP',\n}\n\nexport interface GeocoderRequest {\n  address?: string;\n  bounds?: LatLngBounds | LatLngBoundsLiteral;\n  componentRestrictions?: GeocoderComponentRestrictions;\n  location?: LatLng | LatLngLiteral;\n  placeId?: string;\n  region?: string;\n}\n\nexport interface GeocoderResult {\n  address_components: GeocoderAddressComponent[];\n  formatted_address: string;\n  geometry: GeocoderGeometry;\n  partial_match: boolean;\n  place_id: string;\n  postcode_localities: string[];\n  types: string[];\n}\n\nexport enum GeocoderStatus {\n  ERROR = 'ERROR',\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  OK = 'OK',\n  OVER_QUERY_LIMIT = 'OVER_QUERY_LIMIT',\n  REQUEST_DENIED = 'REQUEST_DENIED',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n  ZERO_RESULTS = 'ZERO_RESULTS',\n}\n","import {MapsAPILoader} from './maps-api-loader';\n\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\nexport class NoOpMapsAPILoader implements MapsAPILoader {\n  load(): Promise<void> {\n    if (!(<any>window).google || !(<any>window).google.maps) {\n      throw new Error(\n          'Google Maps API not loaded on page. Make sure window.google.maps is available!');\n    }\n    return Promise.resolve();\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\n// import {AgmMap} from './directives/map';\nimport {AgmCircle} from './directives/circle';\nimport {AgmInfoWindow} from './directives/info-window';\nimport {AgmMarker} from './directives/marker';\nimport {AgmPolygon} from './directives/polygon';\nimport {AgmPolyline} from './directives/polyline';\nimport {AgmPolylinePoint} from './directives/polyline-point';\nimport {AgmKmlLayer} from './directives/kml-layer';\nimport {AgmDataLayer} from './directives/data-layer';\nimport {AgmSearchBox} from './directives/search-box';\nimport {AgmControl} from './directives/control';\nimport {LazyMapsAPILoader} from './services/maps-api-loader/lazy-maps-api-loader';\nimport {LAZY_MAPS_API_CONFIG, LazyMapsAPILoaderConfigLiteral} from './services/maps-api-loader/lazy-maps-api-loader';\nimport {MapsAPILoader} from './services/maps-api-loader/maps-api-loader';\nimport {BROWSER_GLOBALS_PROVIDERS} from './utils/browser-globals';\nimport {AgmMap} from './directives/map';\nimport {AgmRoute} from './directives/route';\n\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\n@NgModule({declarations: [\n    AgmMap, AgmMarker, AgmInfoWindow, AgmCircle,\n    AgmPolygon, AgmPolyline, AgmPolylinePoint, AgmKmlLayer,\n    AgmDataLayer,\n    AgmSearchBox, AgmControl, AgmRoute\n  ],\n  exports: [\n    AgmMap, AgmMarker, AgmInfoWindow, AgmCircle,\n    AgmPolygon, AgmPolyline, AgmPolylinePoint, AgmKmlLayer,\n    AgmDataLayer,\n    AgmSearchBox, AgmControl, AgmRoute\n  ],\n  }\n)\nexport class AgmxCoreModule {\n  /**\n   * Please use this method when you register the module at the root level.\n   */\n  static forRoot(lazyMapsAPILoaderConfig?: LazyMapsAPILoaderConfigLiteral): ModuleWithProviders<AgmxCoreModule> {\n    return {\n      ngModule: AgmxCoreModule,\n      providers: [\n        ...BROWSER_GLOBALS_PROVIDERS,\n        {provide: MapsAPILoader, useClass: LazyMapsAPILoader},\n        {provide: LAZY_MAPS_API_CONFIG, useValue: lazyMapsAPILoaderConfig}\n      ],\n    };\n  }\n}\n"]}